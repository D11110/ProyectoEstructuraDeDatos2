/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package proyectoestructuradatos2;

import java.awt.Font;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;
import javax.xml.parsers.DocumentBuilder;
import org.apache.poi.*;
import org.apache.poi.hssf.usermodel.HSSFCell;
import org.apache.poi.hssf.usermodel.HSSFFont;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.ss.usermodel.CellStyle;
import org.apache.poi.ss.usermodel.CellType;
import org.apache.poi.ss.usermodel.FillPatternType;
import org.apache.poi.ss.usermodel.IndexedColors;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.transform.Result;
import javax.xml.transform.Source;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;
import org.w3c.dom.DOMImplementation;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.Text;

/**
 *
 * @author Daniel
 */
public class main extends javax.swing.JFrame {

    /**
     * Creates new form main
     */
    public main() {
        initComponents();
        archivoCerrado();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jD_Archivo = new javax.swing.JDialog();
        btnArchivoAbrir = new javax.swing.JButton();
        btnArchivoSalvar = new javax.swing.JButton();
        btnArchivoCerrar = new javax.swing.JButton();
        btnArchivoSalir = new javax.swing.JButton();
        btnArchivoNuevo = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jD_Campos = new javax.swing.JDialog();
        btnCamposCrear = new javax.swing.JButton();
        btnCamposListar = new javax.swing.JButton();
        btnCamposModificar = new javax.swing.JButton();
        btnCamposBorrar = new javax.swing.JButton();
        btnCamposSalir = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jD_Registros = new javax.swing.JDialog();
        btnRegistrosIntroducir = new javax.swing.JButton();
        btnRegistrosModificar = new javax.swing.JButton();
        btnRegistrosBuscar = new javax.swing.JButton();
        btnRegistrosBorrar = new javax.swing.JButton();
        btnRegistrosListar = new javax.swing.JButton();
        btnRegistrosSalir = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel();
        jD_Indices = new javax.swing.JDialog();
        btnIndicesCrear = new javax.swing.JButton();
        btnIndicesIndexar = new javax.swing.JButton();
        btnIndicesSalir = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jD_Estandarizacion = new javax.swing.JDialog();
        btnEstandExportExcel = new javax.swing.JButton();
        btnEstandXMLSchema = new javax.swing.JButton();
        btnEstandSalir = new javax.swing.JButton();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jD_TablaListarRegistros = new javax.swing.JDialog();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablaRegistrosListar = new javax.swing.JTable();
        btnCerrarDialogoTabla = new javax.swing.JButton();
        btnMainMenuArchivo = new javax.swing.JButton();
        btnMainMenuCampos = new javax.swing.JButton();
        btnMainMenuRegistros = new javax.swing.JButton();
        btnMainMenuIndices = new javax.swing.JButton();
        btnMainMenuEstandarizacion = new javax.swing.JButton();
        btnMainMenuSalir = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();

        jD_Archivo.setMaximumSize(new java.awt.Dimension(500, 428));
        jD_Archivo.setMinimumSize(new java.awt.Dimension(500, 428));
        jD_Archivo.setPreferredSize(new java.awt.Dimension(500, 428));
        jD_Archivo.getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        btnArchivoAbrir.setFont(new java.awt.Font("Eras Light ITC", 0, 18)); // NOI18N
        btnArchivoAbrir.setText("Abrir archivo");
        btnArchivoAbrir.setMaximumSize(new java.awt.Dimension(100, 20));
        btnArchivoAbrir.setMinimumSize(new java.awt.Dimension(100, 20));
        btnArchivoAbrir.setPreferredSize(new java.awt.Dimension(100, 20));
        btnArchivoAbrir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnArchivoAbrirActionPerformed(evt);
            }
        });
        jD_Archivo.getContentPane().add(btnArchivoAbrir, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 131, 180, 30));

        btnArchivoSalvar.setFont(new java.awt.Font("Eras Light ITC", 0, 18)); // NOI18N
        btnArchivoSalvar.setText("Salvar archivo");
        btnArchivoSalvar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnArchivoSalvarActionPerformed(evt);
            }
        });
        jD_Archivo.getContentPane().add(btnArchivoSalvar, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 172, 180, 30));

        btnArchivoCerrar.setFont(new java.awt.Font("Eras Light ITC", 0, 18)); // NOI18N
        btnArchivoCerrar.setText("Cerrar archivo");
        btnArchivoCerrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnArchivoCerrarActionPerformed(evt);
            }
        });
        jD_Archivo.getContentPane().add(btnArchivoCerrar, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 213, 180, 30));

        btnArchivoSalir.setFont(new java.awt.Font("Eras Light ITC", 0, 14)); // NOI18N
        btnArchivoSalir.setText("Salir");
        btnArchivoSalir.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnArchivoSalirMouseClicked(evt);
            }
        });
        jD_Archivo.getContentPane().add(btnArchivoSalir, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 360, -1, -1));

        btnArchivoNuevo.setFont(new java.awt.Font("Eras Light ITC", 0, 18)); // NOI18N
        btnArchivoNuevo.setText("Nuevo archivo");
        btnArchivoNuevo.setMaximumSize(new java.awt.Dimension(100, 20));
        btnArchivoNuevo.setMinimumSize(new java.awt.Dimension(100, 20));
        btnArchivoNuevo.setPreferredSize(new java.awt.Dimension(100, 20));
        btnArchivoNuevo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnArchivoNuevoActionPerformed(evt);
            }
        });
        jD_Archivo.getContentPane().add(btnArchivoNuevo, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 90, 180, 30));

        jLabel2.setFont(new java.awt.Font("Eras Light ITC", 0, 48)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Archivo");
        jD_Archivo.getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 11, -1, -1));

        jLabel7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/proyectoestructuradatos2/imgs/gradientarchivebg.png"))); // NOI18N
        jLabel7.setMaximumSize(new java.awt.Dimension(489, 416));
        jLabel7.setMinimumSize(new java.awt.Dimension(489, 416));
        jLabel7.setPreferredSize(new java.awt.Dimension(489, 416));
        jD_Archivo.getContentPane().add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, -100, 530, 630));

        jD_Campos.setMinimumSize(new java.awt.Dimension(400, 400));
        jD_Campos.getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        btnCamposCrear.setFont(new java.awt.Font("Eras Light ITC", 0, 18)); // NOI18N
        btnCamposCrear.setText("Crear campos");
        btnCamposCrear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCamposCrearActionPerformed(evt);
            }
        });
        jD_Campos.getContentPane().add(btnCamposCrear, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 90, 170, -1));

        btnCamposListar.setFont(new java.awt.Font("Eras Light ITC", 0, 18)); // NOI18N
        btnCamposListar.setText("Listar campos");
        btnCamposListar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCamposListarActionPerformed(evt);
            }
        });
        jD_Campos.getContentPane().add(btnCamposListar, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 130, 170, -1));

        btnCamposModificar.setFont(new java.awt.Font("Eras Light ITC", 0, 18)); // NOI18N
        btnCamposModificar.setText("Modificar campos");
        btnCamposModificar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCamposModificarActionPerformed(evt);
            }
        });
        jD_Campos.getContentPane().add(btnCamposModificar, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 170, 170, -1));

        btnCamposBorrar.setFont(new java.awt.Font("Eras Light ITC", 0, 18)); // NOI18N
        btnCamposBorrar.setText("Borrar campos");
        btnCamposBorrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCamposBorrarActionPerformed(evt);
            }
        });
        jD_Campos.getContentPane().add(btnCamposBorrar, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 210, 170, -1));

        btnCamposSalir.setFont(new java.awt.Font("Eras Light ITC", 0, 18)); // NOI18N
        btnCamposSalir.setText("Salir");
        btnCamposSalir.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnCamposSalirMouseClicked(evt);
            }
        });
        jD_Campos.getContentPane().add(btnCamposSalir, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 360, -1, -1));

        jLabel1.setFont(new java.awt.Font("Eras Light ITC", 0, 48)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Campos");
        jD_Campos.getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 11, -1, -1));

        jLabel8.setIcon(new javax.swing.ImageIcon(getClass().getResource("/proyectoestructuradatos2/imgs/gradientarchivebg.png"))); // NOI18N
        jD_Campos.getContentPane().add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(-10, 0, -1, -1));

        jD_Registros.setMinimumSize(new java.awt.Dimension(400, 400));
        jD_Registros.getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        btnRegistrosIntroducir.setFont(new java.awt.Font("Eras Light ITC", 0, 18)); // NOI18N
        btnRegistrosIntroducir.setText("Introducir registros");
        btnRegistrosIntroducir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRegistrosIntroducirActionPerformed(evt);
            }
        });
        jD_Registros.getContentPane().add(btnRegistrosIntroducir, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 95, 174, 39));

        btnRegistrosModificar.setFont(new java.awt.Font("Eras Light ITC", 0, 18)); // NOI18N
        btnRegistrosModificar.setText("Modificar registros");
        btnRegistrosModificar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRegistrosModificarActionPerformed(evt);
            }
        });
        jD_Registros.getContentPane().add(btnRegistrosModificar, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 143, 174, 39));

        btnRegistrosBuscar.setFont(new java.awt.Font("Eras Light ITC", 0, 18)); // NOI18N
        btnRegistrosBuscar.setText("Buscar registros");
        btnRegistrosBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRegistrosBuscarActionPerformed(evt);
            }
        });
        jD_Registros.getContentPane().add(btnRegistrosBuscar, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 188, 174, 39));

        btnRegistrosBorrar.setFont(new java.awt.Font("Eras Light ITC", 0, 18)); // NOI18N
        btnRegistrosBorrar.setText("Borrar registros");
        btnRegistrosBorrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRegistrosBorrarActionPerformed(evt);
            }
        });
        jD_Registros.getContentPane().add(btnRegistrosBorrar, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 233, 174, 39));

        btnRegistrosListar.setFont(new java.awt.Font("Eras Light ITC", 0, 18)); // NOI18N
        btnRegistrosListar.setText("Listar registros");
        btnRegistrosListar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRegistrosListarActionPerformed(evt);
            }
        });
        jD_Registros.getContentPane().add(btnRegistrosListar, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 278, 174, 39));

        btnRegistrosSalir.setFont(new java.awt.Font("Eras Light ITC", 0, 18)); // NOI18N
        btnRegistrosSalir.setText("Salir");
        btnRegistrosSalir.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnRegistrosSalirMouseClicked(evt);
            }
        });
        jD_Registros.getContentPane().add(btnRegistrosSalir, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 350, 70, 33));

        jLabel3.setFont(new java.awt.Font("Eras Light ITC", 0, 48)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Registros");
        jD_Registros.getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 11, -1, -1));

        jButton1.setFont(new java.awt.Font("Eras Light ITC", 0, 18)); // NOI18N
        jButton1.setText("Cruzar archivos");
        jButton1.setMaximumSize(new java.awt.Dimension(135, 29));
        jButton1.setMinimumSize(new java.awt.Dimension(135, 29));
        jButton1.setPreferredSize(new java.awt.Dimension(135, 29));
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jD_Registros.getContentPane().add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 330, 170, 30));

        jLabel9.setIcon(new javax.swing.ImageIcon(getClass().getResource("/proyectoestructuradatos2/imgs/gradientarchivebg.png"))); // NOI18N
        jD_Registros.getContentPane().add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(-10, 0, -1, 440));

        jD_Indices.setMinimumSize(new java.awt.Dimension(400, 400));
        jD_Indices.getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        btnIndicesCrear.setFont(new java.awt.Font("Eras Light ITC", 0, 18)); // NOI18N
        btnIndicesCrear.setText("Crear indices");
        btnIndicesCrear.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnIndicesCrearMouseClicked(evt);
            }
        });
        jD_Indices.getContentPane().add(btnIndicesCrear, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 94, 163, 36));

        btnIndicesIndexar.setFont(new java.awt.Font("Eras Light ITC", 0, 18)); // NOI18N
        btnIndicesIndexar.setText("Re-indexar indices");
        btnIndicesIndexar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnIndicesIndexarActionPerformed(evt);
            }
        });
        jD_Indices.getContentPane().add(btnIndicesIndexar, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 136, -1, 36));

        btnIndicesSalir.setFont(new java.awt.Font("Eras Light ITC", 0, 18)); // NOI18N
        btnIndicesSalir.setText("Salir");
        btnIndicesSalir.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnIndicesSalirMouseClicked(evt);
            }
        });
        jD_Indices.getContentPane().add(btnIndicesSalir, new org.netbeans.lib.awtextra.AbsoluteConstraints(311, 351, 79, 38));

        jLabel4.setFont(new java.awt.Font("Eras Light ITC", 0, 48)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("Indices");
        jD_Indices.getContentPane().add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 11, -1, -1));

        jLabel10.setIcon(new javax.swing.ImageIcon(getClass().getResource("/proyectoestructuradatos2/imgs/gradientarchivebg.png"))); // NOI18N
        jD_Indices.getContentPane().add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(-40, 0, -1, -1));

        jD_Estandarizacion.setMinimumSize(new java.awt.Dimension(400, 400));
        jD_Estandarizacion.getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        btnEstandExportExcel.setFont(new java.awt.Font("Eras Light ITC", 0, 18)); // NOI18N
        btnEstandExportExcel.setText("Exportar excel");
        btnEstandExportExcel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEstandExportExcelActionPerformed(evt);
            }
        });
        jD_Estandarizacion.getContentPane().add(btnEstandExportExcel, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 84, 229, 39));

        btnEstandXMLSchema.setFont(new java.awt.Font("Eras Light ITC", 0, 18)); // NOI18N
        btnEstandXMLSchema.setText("Exportar XML con Schema");
        btnEstandXMLSchema.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEstandXMLSchemaActionPerformed(evt);
            }
        });
        jD_Estandarizacion.getContentPane().add(btnEstandXMLSchema, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 134, -1, 39));

        btnEstandSalir.setFont(new java.awt.Font("Eras Light ITC", 0, 18)); // NOI18N
        btnEstandSalir.setText("Salir");
        btnEstandSalir.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnEstandSalirMouseClicked(evt);
            }
        });
        jD_Estandarizacion.getContentPane().add(btnEstandSalir, new org.netbeans.lib.awtextra.AbsoluteConstraints(303, 345, 78, 44));

        jLabel11.setFont(new java.awt.Font("Eras Light ITC", 0, 48)); // NOI18N
        jLabel11.setForeground(new java.awt.Color(255, 255, 255));
        jLabel11.setText("Estandarizacion");
        jD_Estandarizacion.getContentPane().add(jLabel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 11, -1, -1));

        jLabel12.setIcon(new javax.swing.ImageIcon(getClass().getResource("/proyectoestructuradatos2/imgs/gradientarchivebg.png"))); // NOI18N
        jD_Estandarizacion.getContentPane().add(jLabel12, new org.netbeans.lib.awtextra.AbsoluteConstraints(-50, -10, -1, -1));

        jD_TablaListarRegistros.setMinimumSize(new java.awt.Dimension(800, 500));
        jD_TablaListarRegistros.getContentPane().setLayout(null);

        tablaRegistrosListar.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(tablaRegistrosListar);

        jD_TablaListarRegistros.getContentPane().add(jScrollPane1);
        jScrollPane1.setBounds(40, 20, 700, 370);

        btnCerrarDialogoTabla.setText("Salir");
        btnCerrarDialogoTabla.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCerrarDialogoTablaActionPerformed(evt);
            }
        });
        jD_TablaListarRegistros.getContentPane().add(btnCerrarDialogoTabla);
        btnCerrarDialogoTabla.setBounds(660, 410, 80, 30);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(600, 600));
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        btnMainMenuArchivo.setFont(new java.awt.Font("Eras Light ITC", 0, 36)); // NOI18N
        btnMainMenuArchivo.setText("Archivo");
        btnMainMenuArchivo.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnMainMenuArchivoMouseClicked(evt);
            }
        });
        getContentPane().add(btnMainMenuArchivo, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 100, 179, -1));

        btnMainMenuCampos.setFont(new java.awt.Font("Eras Light ITC", 0, 36)); // NOI18N
        btnMainMenuCampos.setText("Campos");
        btnMainMenuCampos.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnMainMenuCamposMouseClicked(evt);
            }
        });
        getContentPane().add(btnMainMenuCampos, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 100, 160, -1));

        btnMainMenuRegistros.setFont(new java.awt.Font("Eras Light ITC", 0, 36)); // NOI18N
        btnMainMenuRegistros.setText("Registros");
        btnMainMenuRegistros.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnMainMenuRegistrosMouseClicked(evt);
            }
        });
        getContentPane().add(btnMainMenuRegistros, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 170, 180, -1));

        btnMainMenuIndices.setFont(new java.awt.Font("Eras Light ITC", 0, 36)); // NOI18N
        btnMainMenuIndices.setText("Indices");
        btnMainMenuIndices.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnMainMenuIndicesMouseClicked(evt);
            }
        });
        getContentPane().add(btnMainMenuIndices, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 170, 159, -1));

        btnMainMenuEstandarizacion.setFont(new java.awt.Font("Eras Light ITC", 0, 36)); // NOI18N
        btnMainMenuEstandarizacion.setText("Estandarizacion");
        btnMainMenuEstandarizacion.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnMainMenuEstandarizacionMouseClicked(evt);
            }
        });
        getContentPane().add(btnMainMenuEstandarizacion, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 240, -1, -1));

        btnMainMenuSalir.setFont(new java.awt.Font("Eras Light ITC", 0, 24)); // NOI18N
        btnMainMenuSalir.setText("Salir");
        btnMainMenuSalir.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnMainMenuSalirMouseClicked(evt);
            }
        });
        getContentPane().add(btnMainMenuSalir, new org.netbeans.lib.awtextra.AbsoluteConstraints(439, 481, 100, 40));

        jLabel6.setFont(new java.awt.Font("Eras Light ITC", 0, 56)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setText("Standard File Manager");
        getContentPane().add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, -1, -1));

        jLabel5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/proyectoestructuradatos2/imgs/bgproyecto.jpg"))); // NOI18N
        getContentPane().add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(-20, 0, 660, 620));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public void archivoCerrado() {
        btnArchivoAbrir.setEnabled(true);
        btnArchivoNuevo.setEnabled(true);
        btnCamposCrear.setEnabled(false);
        btnCamposModificar.setEnabled(false);
        btnCamposBorrar.setEnabled(false);
        btnCamposListar.setEnabled(false);
        btnArchivoSalvar.setEnabled(false);
        btnArchivoCerrar.setEnabled(false);
        btnRegistrosBorrar.setEnabled(false);
        btnRegistrosBuscar.setEnabled(false);
        btnRegistrosIntroducir.setEnabled(false);
        btnRegistrosListar.setEnabled(false);
        btnRegistrosModificar.setEnabled(false);
        btnIndicesCrear.setEnabled(false);
        btnIndicesIndexar.setEnabled(false);
        btnEstandExportExcel.setEnabled(true);
        btnEstandXMLSchema.setEnabled(true);
    }

    public void archivoAbierto() {
        btnArchivoAbrir.setEnabled(false);
        btnArchivoNuevo.setEnabled(false);
        btnCamposCrear.setEnabled(true);
        btnCamposModificar.setEnabled(true);
        btnCamposBorrar.setEnabled(true);
        btnCamposListar.setEnabled(true);
        btnArchivoSalvar.setEnabled(true);
        btnArchivoCerrar.setEnabled(true);
        btnRegistrosBorrar.setEnabled(true);
        btnRegistrosBuscar.setEnabled(true);
        btnRegistrosIntroducir.setEnabled(true);
        btnRegistrosListar.setEnabled(true);
        btnRegistrosModificar.setEnabled(true);
        btnIndicesCrear.setEnabled(true);
        btnIndicesIndexar.setEnabled(true);
        btnEstandExportExcel.setEnabled(true);
        btnEstandXMLSchema.setEnabled(true);
    }

    private void btnMainMenuArchivoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnMainMenuArchivoMouseClicked
        // TODO add your handling code here:
        jD_Archivo.pack();
        jD_Archivo.setLocationRelativeTo(this);
        jD_Archivo.setVisible(true);
        setVisible(false);
    }//GEN-LAST:event_btnMainMenuArchivoMouseClicked

    private void btnMainMenuSalirMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnMainMenuSalirMouseClicked
        // TODO add your handling code here:
        System.exit(0);
    }//GEN-LAST:event_btnMainMenuSalirMouseClicked

    private void btnArchivoSalirMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnArchivoSalirMouseClicked
        // TODO add your handling code here:
        jD_Archivo.pack();
        jD_Archivo.setLocationRelativeTo(this);
        jD_Archivo.setVisible(false);
        setVisible(true);
    }//GEN-LAST:event_btnArchivoSalirMouseClicked

    private void btnMainMenuCamposMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnMainMenuCamposMouseClicked
        // TODO add your handling code here:
        jD_Campos.pack();
        jD_Campos.setLocationRelativeTo(this);
        jD_Campos.setVisible(true);
        setVisible(false);
    }//GEN-LAST:event_btnMainMenuCamposMouseClicked

    private void btnCamposSalirMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnCamposSalirMouseClicked
        // TODO add your handling code here:
        jD_Campos.pack();
        jD_Campos.setLocationRelativeTo(this);
        jD_Campos.setVisible(false);
        setVisible(true);
    }//GEN-LAST:event_btnCamposSalirMouseClicked

    private void btnMainMenuRegistrosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnMainMenuRegistrosMouseClicked
        // TODO add your handling code here:
        jD_Registros.pack();
        jD_Registros.setLocationRelativeTo(this);
        jD_Registros.setVisible(true);
        setVisible(false);
    }//GEN-LAST:event_btnMainMenuRegistrosMouseClicked

    private void btnRegistrosSalirMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnRegistrosSalirMouseClicked
        // TODO add your handling code here:
        jD_Registros.pack();
        jD_Registros.setLocationRelativeTo(this);
        jD_Registros.setVisible(false);
        setVisible(true);
    }//GEN-LAST:event_btnRegistrosSalirMouseClicked

    private void btnMainMenuIndicesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnMainMenuIndicesMouseClicked
        // TODO add your handling code here:
        jD_Indices.pack();
        jD_Indices.setLocationRelativeTo(this);
        jD_Indices.setVisible(true);
        setVisible(false);
    }//GEN-LAST:event_btnMainMenuIndicesMouseClicked

    private void btnIndicesSalirMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnIndicesSalirMouseClicked
        // TODO add your handling code here:
        jD_Indices.pack();
        jD_Indices.setLocationRelativeTo(this);
        jD_Indices.setVisible(false);
        setVisible(true);
    }//GEN-LAST:event_btnIndicesSalirMouseClicked

    private void btnMainMenuEstandarizacionMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnMainMenuEstandarizacionMouseClicked
        // TODO add your handling code here:
        jD_Estandarizacion.pack();
        jD_Estandarizacion.setLocationRelativeTo(this);
        jD_Estandarizacion.setVisible(true);
        setVisible(false);
    }//GEN-LAST:event_btnMainMenuEstandarizacionMouseClicked

    private void btnEstandSalirMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnEstandSalirMouseClicked
        // TODO add your handling code here:
        jD_Estandarizacion.pack();
        jD_Estandarizacion.setLocationRelativeTo(this);
        jD_Estandarizacion.setVisible(false);
        setVisible(true);
    }//GEN-LAST:event_btnEstandSalirMouseClicked

    String metadata = "";
    boolean archivoFueAbierto = false;

    public void actualizarCampos(String nombreCampo, String tipoCampo, int longitudCampo) {
        camposDeterminados += nombreCampo + "|" + tipoCampo + "|" + longitudCampo + "|#";
    }

    public void listaCampos(String camposConcatenados) {
        if (camposConcatenados.contains(",")) {
            camposConcatenados = camposConcatenados.replaceAll(",", "");
        }
        String listaCampo = "";
        String p[] = camposConcatenados.split("#");
        for (int j = 0; j < p.length; j++) {
            String q[] = p[j].split("\\|");

            listaCampo += "Campo " + q[0] + " de tipo " + q[1] + " con tamaño máx de " + q[2] + "\n";
        }
        listarCampos = listaCampo;
    }

    public void creacionCampos() {
        try {
            String numCamposInput = JOptionPane.showInputDialog(this, "Ingrese la cantidad de campos:");
            numCampos = Integer.parseInt(numCamposInput);

            for (int i = 0; i < numCampos; i++) {
                String nombreCampoTemp = JOptionPane.showInputDialog(this, "Ingrese el nombre para el campo " + (i + 1) + " ");

                String tipoCampoTemp = JOptionPane.showInputDialog(this, "Ingrese el tipo de campo para el campo " + nombreCampoTemp + "\n 1 = int,2 = String, 3 = double, 4 = boolean, 5 = long");
                int tipoCampoDecodificado = Integer.parseInt(tipoCampoTemp);
                String tipoDeCampoDefinitivo = "";
                if (tipoCampoDecodificado == 1) {
                    tipoDeCampoDefinitivo = "int";
                } else if (tipoCampoDecodificado == 2) {
                    tipoDeCampoDefinitivo = "char";
                } else if (tipoCampoDecodificado == 3) {
                    tipoDeCampoDefinitivo = "double";
                } else if (tipoCampoDecodificado == 4) {
                    tipoDeCampoDefinitivo = "boolean";
                } else if (tipoCampoDecodificado == 5) {
                    tipoDeCampoDefinitivo = "long";
                } else {
                    boolean pasa = false;
                    while (!pasa) {
                        tipoCampoTemp = JOptionPane.showInputDialog(this, "Ingrese el tipo correcto de campo para el campo " + nombreCampoTemp + "\n 1 = int,2 = String, 3 = double, 4 = boolean");
                        tipoCampoDecodificado = Integer.parseInt(tipoCampoTemp);
                        if (tipoCampoDecodificado == 1 || tipoCampoDecodificado == 2 || tipoCampoDecodificado == 3 || tipoCampoDecodificado == 4 || tipoCampoDecodificado == 5) {
                            pasa = true;
                        }
                    }
                }

                String longitudCampoTemp = JOptionPane.showInputDialog(this, "Ingrese la longitud de campo para el campo (de 0 en adelante) " + nombreCampoTemp);
                int longitudCampoIntTemp = Integer.parseInt(longitudCampoTemp);
                boolean verificacionLongitud = false;
                while (!verificacionLongitud) {
                    if (tipoDeCampoDefinitivo.equals("int")) {
                        if (longitudCampoIntTemp >= 10) {
                            longitudCampoTemp = JOptionPane.showInputDialog(this, "El size de este campo, es mayor a lo que los enteros soportan numericamente, intenta con otro size");
                            longitudCampoIntTemp = Integer.parseInt(longitudCampoTemp);
                        } else {
                            verificacionLongitud = true;
                        }
                    } else {
                        if (longitudCampoIntTemp <= 0) {
                            longitudCampoTemp = JOptionPane.showInputDialog(this, "Ingrese la longitud correcta de campo para el campo (de 0 en adelante) " + nombreCampoTemp);
                            longitudCampoIntTemp = Integer.parseInt(longitudCampoTemp);
                        } else {
                            verificacionLongitud = true;
                        }
                    }

                }

                camposDeterminados += nombreCampoTemp + "|" + tipoDeCampoDefinitivo + "|" + longitudCampoIntTemp + "|#";
                listarCampos += "Campo " + nombreCampoTemp + " de tipo " + tipoDeCampoDefinitivo + " con tamaño máx de " + longitudCampoIntTemp + "\n";

            }
            camposDeterminados += ",";
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Se ingreso un dato o caracter no valido en el sistema por favor vuelva a intentar.", "ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void btnCamposBorrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCamposBorrarActionPerformed

        try {
            JOptionPane.showMessageDialog(this, listarCampos, "Campos disponibles", JOptionPane.PLAIN_MESSAGE);
            int numCampoBorrar = numCampoBorrar = Integer.parseInt(JOptionPane.showInputDialog(this, "Ingresa número de campo a eliminar: "));
            while (numCampoBorrar == indiceLlavePrimariaDecodificado || numCampoBorrar == indiceLlavePrimariaDecodificado) {
                numCampoBorrar = Integer.parseInt(JOptionPane.showInputDialog(this, "Ingresa número de campo a eliminar (distinto al que representa la llave): "));
            }
            String campos[] = camposDeterminados.split("#");
            camposDeterminados = camposDeterminados.replace(campos[numCampoBorrar - 1] + "#", "");

            listaCampos(camposDeterminados);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Se ingreso un dato o caracter no valido en el sistema por favor vuelva a intentar.", "ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnCamposBorrarActionPerformed

    private void btnCamposModificarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCamposModificarActionPerformed
        try {
            JOptionPane.showMessageDialog(this, listarCampos, "Campos disponibles", JOptionPane.PLAIN_MESSAGE);
            int numCampoModificar = Integer.parseInt(JOptionPane.showInputDialog(this, "Ingresa número de campo a modificar: "));          //VALIDAR
            int opcionModificar = Integer.parseInt(JOptionPane.showInputDialog(this, "Qué vas a modificar?: \n 1: Nombre campo\n 2: Tipo variable\n 3: Longitud campo"));          //VALIDAR
            String nuevoParametro = "";
            if (opcionModificar == 1) {
                nuevoParametro = JOptionPane.showInputDialog(this, "Ingresa nuevo nombre de campo: ");
            } else if (opcionModificar == 2) {
                nuevoParametro = JOptionPane.showInputDialog(this, "Ingresa nuevo tipo variable de campo: ");
            } else if (opcionModificar == 3) {
                nuevoParametro = JOptionPane.showInputDialog(this, "Ingresa nueva longitud de campo: ");
            }

            String campos[] = camposDeterminados.split("#");
            String parametrosCampo[] = campos[numCampoModificar - 1].split("\\|");
            camposDeterminados = camposDeterminados.replace(parametrosCampo[opcionModificar - 1], nuevoParametro);

            camposDeterminados += ",";
            listaCampos(camposDeterminados);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Se ingreso un dato o caracter no valido en el sistema por favor vuelva a intentar.", "ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnCamposModificarActionPerformed

    private void btnCamposListarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCamposListarActionPerformed
        JOptionPane.showMessageDialog(this, listarCampos);
    }//GEN-LAST:event_btnCamposListarActionPerformed

    int MAX_VALUE = 2147483647;
    int MIN_VALUE = -2147483648;

    ArrayList<String> nombresCamposEnMemoria = new ArrayList();
    ArrayList<String> tiposCamposEnMemoria = new ArrayList();
    ArrayList<Integer> sizeCamposEnMemoria = new ArrayList();

    public void leerCamposDesdeMemoria() {
        String campos = camposDeterminados;
        campos = removeLastChar(campos);
        String p[] = campos.split("#");
        for (int i = 0; i < p.length; i++) {
            String t[] = p[i].split("\\|");
            for (int j = 0; j < t.length; j++) {
                if (j == 0) {
                    nombresCamposEnMemoria.add(t[j]);
                } else if (j == 1) {
                    tiposCamposEnMemoria.add(t[j]);
                } else if (j == 2) {
                    sizeCamposEnMemoria.add(Integer.parseInt(t[j]));
                }
            }
        }
    }

    private void btnCamposCrearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCamposCrearActionPerformed

        try {
            FileReader fr = null;
            BufferedReader br = null;
            boolean yaHayMetadata = false;

            try {
                fr = new FileReader(fichero);
                br = new BufferedReader(fr);
                String linea;

                int numLinea = 0;
                while ((linea = br.readLine()) != null) {
                    String q[] = linea.split(",");
                    for (int i = 0; i < q.length; i++) {
                        if (numLinea == 0) {
                            if (q.length > 2) {
                                yaHayMetadata = true;
                            }
                        }
                    }
                    numLinea++;
                }
            } catch (Exception e) {
            }

            try {
                br.close();
                fr.close();
            } catch (IOException ex) {
            }

            if (yaHayMetadata) {
                removeLastChar(camposDeterminados);
                creacionCampos();
            } else {
                creacionCampos();

                JOptionPane.showMessageDialog(this, "Tener en cuenta que la llave primaria tiene que ser de tipo entero.", "Llave primaria", JOptionPane.OK_OPTION);

                String indiceLlavePrimaria = JOptionPane.showInputDialog(this, "Ingrese un num desde 1 hasta " + numCampos + " para seleccionar la llave primaria de los campos.");
                indiceLlavePrimariaDecodificado = Integer.parseInt(indiceLlavePrimaria);
                leerCamposDesdeMemoria();

                if (!tiposCamposEnMemoria.get(indiceLlavePrimariaDecodificado - 1).equals("int")) {
                    JOptionPane.showMessageDialog(this, "Ingrese un campo que sea de tipo entero para poder utilizarlo como llave primaria.", "ERROR EN LLAVE PRIMARIA", JOptionPane.ERROR_MESSAGE);
                    JOptionPane.showMessageDialog(this, "Vuelva a ingresar los campos.", "ERROR EN LLAVE PRIMARIA", JOptionPane.WARNING_MESSAGE);
                    camposDeterminados = "";
                } else {
                    String indiceLlaveSecundaria = indiceLlavePrimaria;
                    while (indiceLlaveSecundaria == indiceLlavePrimaria) {
                        indiceLlaveSecundaria = JOptionPane.showInputDialog(this, "Ingrese un num desde 1 hasta " + numCampos + " para seleccionar la llave secundaria de los campos. Diferente a " + indiceLlavePrimaria);
                    }
                    indiceLlaveSecundariaDecodificado = Integer.parseInt(indiceLlaveSecundaria);

                    metadata += indiceLlavePrimaria + "," + indiceLlaveSecundaria + ",";
                    JOptionPane.showMessageDialog(this, "Definicion de campos creada exitosamente.", "Operacion exitosa", JOptionPane.PLAIN_MESSAGE);
                }
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Se ingreso un dato o caracter no valido en el sistema por favor vuelva a intentar.", "ERROR", JOptionPane.ERROR_MESSAGE);
        }

    }//GEN-LAST:event_btnCamposCrearActionPerformed

    private void btnArchivoNuevoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnArchivoNuevoActionPerformed

        try {
            archivoAbierto();
            String nombreArchivo;
            camposDeterminados = "";
            listarCampos = "";

            JFileChooser jfc = new JFileChooser("./");
            FileNameExtensionFilter filtro = new FileNameExtensionFilter("Archivos de Texto", "txt");
            jfc.addChoosableFileFilter(filtro);
            int seleccion = jfc.showSaveDialog(this);
            FileWriter fw = null;
            BufferedWriter bw = null;
            if (seleccion == JFileChooser.APPROVE_OPTION) {
                try {
                    if (jfc.getFileFilter().getDescription().equals("Archivos de Texto")) {
                        nombreArchivo = jfc.getSelectedFile().getName();
                        fichero = new File(jfc.getSelectedFile().getPath() + ".txt");

                    } else {
                        nombreArchivo = jfc.getSelectedFile().getName();
                        fichero = new File(jfc.getSelectedFile().getPath() + ".txt");

                    }
                    fw = new FileWriter(fichero);
                    bw = new BufferedWriter(fw);

                    metadata = "METADATA," + nombreArchivo + ",";

                    bw.flush();

                    //CREAR ARCHIVO DE AVAILIST
                    File ficheroAvail = new File("./" + nombreArchivo + "_availList.txt");
                    try {
                        // A partir del objeto File creamos el fichero físicamente
                        if (ficheroAvail.createNewFile()) {
                        }
                    } catch (IOException ioe) {
                        ioe.printStackTrace();
                    }
                    JOptionPane.showMessageDialog(this, "Archivo guardado excitosamente en " + fichero.toString());
                } catch (Exception e) {
                    e.printStackTrace();
                }

                try {
                    bw.close();
                    fw.close();
                } catch (IOException ex) {
                }
            } else {
                JOptionPane.showMessageDialog(this, "Se cancelo la operacion.", "ERROR", JOptionPane.ERROR_MESSAGE);
                archivoCerrado();
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Se ingreso un dato o caracter no valido en el sistema por favor vuelva a intentar.", "ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnArchivoNuevoActionPerformed

    public static String removeLastChar(String str) {
        return removeLastChars(str, 1);
    }

    public static String removeLastChars(String str, int chars) {
        return str.substring(0, str.length() - chars);
    }

    private void btnArchivoAbrirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnArchivoAbrirActionPerformed
        try {
            //ARBIR ARCHIVO
            archivoAbierto();
            metadata = "";
            camposDeterminados = "";
            registrosDeterminados = "";
            listarCampos = "";
            archivoFueAbierto = true;
            fichero = null;
            File ficheroAbrir = null;
            FileReader fr = null;
            BufferedReader br = null;

            try {
                JFileChooser jfc = new JFileChooser("./");
                FileNameExtensionFilter filtro = new FileNameExtensionFilter("Archivos de Texto", "txt");
                FileNameExtensionFilter filtro2 = new FileNameExtensionFilter("Imagenes", "jpg", "png", "bmp");
                jfc.setFileFilter(filtro);
                jfc.addChoosableFileFilter(filtro2);
                int seleccion = jfc.showOpenDialog(this);
                if (seleccion == JFileChooser.APPROVE_OPTION) {
                    ficheroAbrir = jfc.getSelectedFile();
                    fichero = ficheroAbrir;                             //se actualiza que el nuevo fichero global es este
                    fr = new FileReader(ficheroAbrir);
                    br = new BufferedReader(fr);
                    String linea;

                    int numLinea = 0;
                    ArrayList<String> nameCampos = new ArrayList();
                    ArrayList<String> tipoCampo = new ArrayList();
                    ArrayList<Integer> sizeCampo = new ArrayList();

                    while ((linea = br.readLine()) != null) {
                        String t[] = linea.split(",");
                        for (int i = 0; i < t.length; i++) {

                            if (numLinea == 0) {                  //METADATA
                                metadata = linea;
                                if (t.length > 2) {
                                    indiceLlavePrimariaDecodificado = Integer.parseInt(t[2]);
                                }
                                if (t.length > 3) {
                                    indiceLlaveSecundariaDecodificado = Integer.parseInt(t[3]);
                                }
                            }
                            if (numLinea == 1) {
                                String p[] = t[i].split("#");
                                for (int j = 0; j < p.length; j++) {
                                    String q[] = p[j].split("\\|");
                                    for (int k = 0; k < q.length; k++) {
                                        if (k == 0) {
                                            nameCampos.add(q[k]);
                                        }
                                        if (k == 1) {
                                            tipoCampo.add(q[k]);
                                        }
                                        if (k == 2) {
                                            sizeCampo.add(Integer.valueOf(q[k]));
                                        }
                                    }
                                }
                            }
                        }

                        numLinea++;
                    }
                    for (int i = 0; i < nameCampos.size(); i++) {

                        listarCampos += "Campo " + nameCampos.get(i) + " de tipo " + tipoCampo.get(i) + " con tamaño máx de " + sizeCampo.get(i) + "\n";
                        actualizarCampos(nameCampos.get(i), tipoCampo.get(i), sizeCampo.get(i));
                    }

                } else {
                    JOptionPane.showMessageDialog(this, "Se cancelo la operacion.", "ERROR", JOptionPane.ERROR_MESSAGE);
                    archivoCerrado();
                }
            } catch (Exception e) {
            }

            try {
                br.close();
                fr.close();
            } catch (IOException ex) {
            }
        } catch (Exception e) {
        }
    }//GEN-LAST:event_btnArchivoAbrirActionPerformed

    public void actualizarFichero() {
        String actual = fichero.getAbsolutePath();
        fichero = new File(actual);
    }

    private void btnArchivoSalvarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnArchivoSalvarActionPerformed
        //SALVAR ARCHIVO
        try {
            if (fichero != null) {
                FileWriter fw = null;
                BufferedWriter bw = null;
                String linea;
                String reg = leerRegistros();
                try {

                    fw = new FileWriter(fichero);
                    bw = new BufferedWriter(fw);

                    bw.write(metadata + "\n");
                    if (!camposDeterminados.contains(",")) {
                        camposDeterminados += ",";
                    }
                    bw.write(camposDeterminados + "\n");

                    bw.write(reg);
                    bw.flush();
                    JOptionPane.showMessageDialog(this, "Archivo guardado exitosamente en " + fichero.toString());
                } catch (Exception e) {
                    e.printStackTrace();
                }

                try {
                    bw.close();
                    fw.close();
                } catch (IOException ex) {
                }
            } else {
                JOptionPane.showMessageDialog(this, "No has abierto un archivo. Intenta nuevamente");
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Se ingreso un dato o caracter no valido en el sistema por favor vuelva a intentar.", "ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnArchivoSalvarActionPerformed

    private void btnArchivoCerrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnArchivoCerrarActionPerformed
        try {
            int opcion = JOptionPane.showConfirmDialog(this, "¿Guardar Archivo?");
            if (opcion == 0 && fichero != null) {                                          //0:Sí quiere guargar

                FileWriter fw = null;
                BufferedWriter bw = null;
                try {
                    fw = new FileWriter(fichero);
                    bw = new BufferedWriter(fw);
                    bw.write(metadata + "\n");
                    if (!camposDeterminados.contains(",")) {
                        camposDeterminados += ",";
                    }
                    bw.write(camposDeterminados + "\n");
                    String reg = leerRegistros();

                    bw.write(reg);
                    bw.flush();
                    JOptionPane.showMessageDialog(this, "Archivo guardado exitosamente en " + fichero.toString());
                } catch (Exception e) {
                }
                try {
                    bw.close();
                    fw.close();
                } catch (IOException ex) {
                }

                //REINICIAR VARIABLES GLOBALES
                metadata = "";
                camposDeterminados = "";
                listarCampos = "";
                indiceLlavePrimariaDecodificado = 0;
                indiceLlaveSecundariaDecodificado = 0;
                numCampos = 0;
                fichero = null;
            } else if (opcion == 0 && fichero == null) {                                      //0: Si quiere guardar pero no ha abierto un archivo
                JOptionPane.showMessageDialog(this, "Primero debes abrir un archivo");
            } else if (opcion == 1) {                                                       //1:No quiere guardar
                //REINICIAR VARIABLES GLOBALES
                metadata = "";
                camposDeterminados = "";
                listarCampos = "";
                indiceLlavePrimariaDecodificado = 0;
                indiceLlaveSecundariaDecodificado = 0;
                numCampos = 0;
                fichero = null;
            }
            if (opcion != 2 && fichero != null) {                                                              //2:Cancelar
                JOptionPane.showMessageDialog(this, "Archivo cerrado");
            }
            archivoCerrado();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Se ingreso un dato o caracter no valido en el sistema por favor vuelva a intentar.", "ERROR", JOptionPane.ERROR_MESSAGE);
        }

    }//GEN-LAST:event_btnArchivoCerrarActionPerformed

    private void btnRegistrosIntroducirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRegistrosIntroducirActionPerformed
        try {
            // TODO add your handling code here:
            ArrayList<String> nombresParaCampos = new ArrayList<String>();
            ArrayList<String> tipoEnCampos = new ArrayList<String>();
            ArrayList<Integer> tamEnCampos = new ArrayList<Integer>();
            String registroDeterminado = "";
            String camposAUsar = camposDeterminados;
            camposAUsar = removeLastChar(camposAUsar);

            String p[] = camposAUsar.split("#");
            for (int j = 0; j < p.length; j++) {
                String q[] = p[j].split("\\|");
                for (int k = 0; k < q.length; k++) {
                    if (k == 0) {
                        nombresParaCampos.add(q[k]);
                    }
                    if (k == 1) {
                        tipoEnCampos.add(q[k]);
                    }
                    if (k == 2) {
                        tamEnCampos.add(Integer.valueOf(q[k]));
                    }
                }
            }

            String cantidadCampos = JOptionPane.showInputDialog("Ingrese la cantidad de registros que ingresara: ");
            int cantRegistros = Integer.parseInt(cantidadCampos);
            int cantCamposDeterminados = nombresParaCampos.size();

            String registrosPEscritura = "";
            String reg = "";

            for (int j = 0; j < cantRegistros; j++) {
                reg = leerRegistros();
                registroDeterminado = "";
                for (int i = 0; i < cantCamposDeterminados; i++) {
                    boolean pasa = false;
                    if (tipoEnCampos.get(i).equals("char")) {
                        pasa = false;
                        while (pasa == false) {
                            String stringAInsertar = JOptionPane.showInputDialog("Ingrese el string para el campo " + nombresParaCampos.get(i) + " con size max de " + tamEnCampos.get(i));
                            if (stringAInsertar.length() <= tamEnCampos.get(i)) {
                                pasa = true;
                                registroDeterminado += stringAInsertar + "|";
                            } else {
                                JOptionPane.showMessageDialog(this, "El tamaño del registro no es el definido en la definicion de los campos, menor que: " + tamEnCampos.get(i), "ERROR", JOptionPane.ERROR_MESSAGE);
                            }
                        }
                    } else if (tipoEnCampos.get(i).equals("int")) {
                        pasa = false;
                        while (pasa == false) {
                            int intAInsertar = 0;
                            String intAInsertarPre = JOptionPane.showInputDialog("Ingrese el valor para el campo " + nombresParaCampos.get(i) + " con size max de " + tamEnCampos.get(i));
                            intAInsertar = Integer.parseInt(intAInsertarPre);
                            if (String.valueOf(intAInsertar).length() <= tamEnCampos.get(i)) {
                                pasa = true;
                                registroDeterminado += intAInsertar + "|";
                            } else {
                                JOptionPane.showMessageDialog(this, "El tamaño del registro no es el definido en la definicion de los campos, menor que: " + tamEnCampos.get(i), "ERROR", JOptionPane.ERROR_MESSAGE);
                            }
                        }
                    } else if (tipoEnCampos.get(i).equals("boolean")) {
                        pasa = false;
                        while (pasa == false) {
                            String strValorBoolean = JOptionPane.showInputDialog("Ingrese el valor para el campo " + nombresParaCampos.get(i) + " valores permitidos: 0 = false, 1 = true");
                            int intValorBoolean = Integer.parseInt(strValorBoolean);
                            if (intValorBoolean == 0 || intValorBoolean == 1) {
                                if (intValorBoolean == 0) {
                                    registroDeterminado += "false|";
                                    pasa = true;
                                } else if (intValorBoolean == 1) {
                                    registroDeterminado += "true|";
                                    pasa = true;
                                } else {
                                    JOptionPane.showMessageDialog(this, "El dato introducido no es el correcto o aceptado por el sistema.", "ERROR", JOptionPane.ERROR_MESSAGE);
                                }

                            }
                        }
                    } else if (tipoEnCampos.get(i).equals("long")) {
                        pasa = false;
                        while (pasa == false) {
                            long longAInsertar = 0;
                            String longAInsertarPre = JOptionPane.showInputDialog("Ingrese el valor para el campo " + nombresParaCampos.get(i) + " con size max de " + tamEnCampos.get(i));
                            longAInsertar = Long.valueOf(longAInsertarPre);
                            if (String.valueOf(longAInsertar).length() <= tamEnCampos.get(i)) {
                                pasa = true;
                                registroDeterminado += longAInsertar + "|";
                            } else {
                                JOptionPane.showMessageDialog(this, "El tamaño del registro no es el definido en la definicion de los campos, menor que: " + tamEnCampos.get(i), "ERROR", JOptionPane.ERROR_MESSAGE);
                            }
                        }
                    } else if (tipoEnCampos.get(i).equals("double")) {
                        pasa = false;
                        while (pasa == false) {
                            double doubleAInsertar = 0;
                            String doubleAInsertarPre = JOptionPane.showInputDialog("Ingrese el valor para el campo " + nombresParaCampos.get(i) + " con size max de " + tamEnCampos.get(i));
                            doubleAInsertar = Double.valueOf(doubleAInsertarPre);
                            if (String.valueOf(doubleAInsertar).length() <= tamEnCampos.get(i)) {
                                pasa = true;
                                registroDeterminado += doubleAInsertar + "|";
                            } else {
                                JOptionPane.showMessageDialog(this, "El tamaño del registro no es el definido en la definicion de los campos, menor que: " + tamEnCampos.get(i), "ERROR", JOptionPane.ERROR_MESSAGE);
                            }
                        }
                    }
                }
                registrosPEscritura = sobreescribirRegistro(registroDeterminado, reg);

                FileWriter fw = null;
                BufferedWriter bw = null;
                try {

                    fw = new FileWriter(fichero);
                    bw = new BufferedWriter(fw);

                    bw.write(metadata + "\n");
                    if (!camposDeterminados.contains(",")) {
                        camposDeterminados += ",";
                    }
                    bw.write(camposDeterminados + "\n");

                    bw.write(registrosPEscritura);

                    bw.flush();
                } catch (Exception e) {
                }

                try {
                    bw.close();
                    fw.close();
                } catch (IOException ex) {
                }
            }

            JOptionPane.showMessageDialog(this, "Ingresado exitosamente", "Exito", JOptionPane.PLAIN_MESSAGE);
            JOptionPane.showMessageDialog(this, "Recuerde indexar los indices para poder operar con los ultimos registros.", "OJO", JOptionPane.WARNING_MESSAGE);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Se ingreso un dato o caracter no valido en el sistema por favor vuelva a intentar.", "ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnRegistrosIntroducirActionPerformed

    public String leerRegistros() {
        String registros = "";
        try {
            FileReader fr = null;
            BufferedReader br = null;

            try {
                fr = new FileReader(fichero);
                br = new BufferedReader(fr);
                String linea;

                int numLinea = 0;
                while ((linea = br.readLine()) != null) {
                    String q[] = linea.split(",");
                    int am = q.length;
                    for (int i = 0; i < q.length; i++) {
//                    if(numLinea == 0){
//                        llavePrimaria = Integer.parseInt(q[2]);
//                    }
                        if (numLinea == 2) {                  //METADATA
                            registros = q[0];

                        }
                    }
                    numLinea++;
                }
            } catch (Exception e) {
            }

            try {
                br.close();
                fr.close();
            } catch (IOException ex) {
            }

        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Ocurrio un error en la lectura de los registros. Por favor verifique que no haya ningun registro corrupto.", "ERROR", JOptionPane.ERROR_MESSAGE);
        }
        return registros;
    }

    public void escribirRegistros(String registros) {
        FileWriter fw = null;
        BufferedWriter bw = null;
        try {

            fw = new FileWriter(fichero);
            bw = new BufferedWriter(fw);

            bw.write(metadata + "\n");
            if (!camposDeterminados.contains(",")) {
                camposDeterminados += ",";
            }
            bw.write(camposDeterminados + "\n");

            bw.write(registros);

            bw.flush();
        } catch (Exception e) {
            e.printStackTrace();
        }

        try {
            bw.close();
            fw.close();
        } catch (IOException ex) {
        }
    }

    public String leerAvail(String nombreArchivo) {
        String linea = "";
        FileReader fr = null;
        BufferedReader br = null;
        File fichero = new File(nombreArchivo);
        try {
            fr = new FileReader(fichero);
            br = new BufferedReader(fr);

            linea = br.readLine();

        } catch (Exception e) {
            e.printStackTrace();
        }
        try {
            br.close();
            fr.close();
        } catch (IOException ex) {
        }

        return linea;
    }

    public void salvarAvail(String nombreArchivo, String stringGuardar) {
        if (nombreArchivo != null || !nombreArchivo.equals("")) {
            File fichero = new File(nombreArchivo);

            FileWriter fw = null;
            BufferedWriter bw = null;
            FileReader fr = null;
            BufferedReader br = null;
            try {
                fw = new FileWriter(fichero);
                bw = new BufferedWriter(fw);
                bw.write(stringGuardar);
                bw.flush();
                //JOptionPane.showMessageDialog(this, "Archivo guardado exitosamente en " + fichero.toString());
            } catch (Exception e) {
                e.printStackTrace();
            }

            try {
                bw.close();
                fw.close();
            } catch (IOException ex) {
            }

        }
    }

    public String sobreescribirRegistro(String registroInsertar, String registros) {
        try {
            availList = new DoublyLinkedList();
            availList.construirAvail(fichero.getName().toString().replace(".txt", "_availList.txt"), availList);
            DLLNode nodoIntentar = availList.head;
            if (registros == "" || availList.length() == 0) {
                registroInsertar += "#";
                registros += registroInsertar;
            } else {
                for (int i = 0; i < availList.length(); i++) {
                    if (registroInsertar.length() <= (nodoIntentar).tamaño) {
                        registros = registros.substring(0, nodoIntentar.byteOff) + registroInsertar + registros.substring(nodoIntentar.byteOff + nodoIntentar.tamaño, registros.length());

                        //lee el archivo de avail
                        String avail = leerAvail(fichero.getName().toString().replace(".txt", "_availList.txt"));
                        avail = avail.replace(Integer.toString(nodoIntentar.byteOff) + "|" + Integer.toString(nodoIntentar.tamaño) + "|#", "");
                        salvarAvail(fichero.getName().toString().replace(".txt", "_availList.txt"), avail);

                    } else {
                        nodoIntentar = nodoIntentar.next;
                    }

                    if (nodoIntentar == null) {
                        registroInsertar += "#";
                        registros += registroInsertar;
                        break;
                    }
                }
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Ocurrio un error en la sobreescritura de registros.", "ERROR", JOptionPane.ERROR_MESSAGE);
        }

        return registros;
    }


    private void btnIndicesCrearMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnIndicesCrearMouseClicked
        //CREAR INDICES QUE SERIA CREAR ARBOL
        try {
            Tree = new BTree(6);

            String registros = leerRegistros();
//        String temp[] = metadata.split(",");
//        int llavePrimaria = Integer.parseInt(temp[2]);
            int llavePrimaria = indiceLlavePrimariaDecodificado;

            ArrayList<Integer> regs = new ArrayList<Integer>();
            ArrayList<Integer> bytes = new ArrayList<Integer>();
            ArrayList<Integer> lenghts = new ArrayList<Integer>();
            String m[] = registros.split("#");
            for (int i = 0; i < m.length; i++) {
                if (m[i].charAt(0) != '*') {
                    String n[] = m[i].split("\\|");
                    regs.add(Integer.parseInt(n[llavePrimaria - 1]));
                    bytes.add(registros.indexOf(m[i]));
                    lenghts.add(m[i].length());
                }
            }

            for (int i = 0; i < regs.size(); i++) {
                Tree.insert(regs.get(i), bytes.get(i), lenghts.get(i));
            }

            JOptionPane.showMessageDialog(this, "Indices creados exitosamente.");
        } catch (Exception e) {
        }
    }//GEN-LAST:event_btnIndicesCrearMouseClicked


    private void btnRegistrosBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRegistrosBuscarActionPerformed
        //BUSCAR ARCHIVO
        try {
            int llaveRegistro = Integer.parseInt(JOptionPane.showInputDialog(this, "Ingresa la llave del registro a buscar:"));
            if (Tree.search(llaveRegistro) != null) {
                JOptionPane.showMessageDialog(this, "El registro con llave " + llaveRegistro + " sí existe");
            } else {
                JOptionPane.showMessageDialog(this, "El registro con llave " + llaveRegistro + " no existe");
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Se ingreso un dato o caracter no valido por favor verifique sus entradas", "ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnRegistrosBuscarActionPerformed

    private void btnRegistrosBorrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRegistrosBorrarActionPerformed
        try {
            int op = Integer.parseInt(JOptionPane.showInputDialog(this, "Eliminar registro en base a:\n 1. Llave \n 2. Crierio de campos"));
            Llave llaveEliminar;
            if (op == 1) {
                int llaveRegistro = Integer.parseInt(JOptionPane.showInputDialog(this, "Ingresa la llave del registro a eliminar:"));
                llaveEliminar = Tree.search(llaveRegistro);

                if (llaveEliminar != null) {

                    availList.addLast(llaveEliminar.getByteOff(), llaveEliminar.getLength());
                    if (availList.length() >= 2) {
                        availList.sort();
                    }
                    availList.saveAvail(fichero.getName().toString().replace(".txt", "_availList.txt"));

                    availList.removeLast();

                    String registros = leerRegistros();
                    registros = registros.substring(0, llaveEliminar.getByteOff()) + "*" + registros.substring(llaveEliminar.getByteOff() + 1, registros.length());

                    Tree.remove(llaveRegistro);

                    escribirRegistros(registros);
                    JOptionPane.showMessageDialog(this, "Registro eliminado exitosamente.", "Exito", JOptionPane.INFORMATION_MESSAGE);
                    JOptionPane.showMessageDialog(this, "Recuerde indexar los indices para poder operar con los ultimos registros.", "OJO", JOptionPane.WARNING_MESSAGE);
                } else {
                    JOptionPane.showMessageDialog(this, "El registro con llave " + op + " no existe.\n Intenta de nuevo");
                }

            } else if (op == 2) {
                int op2 = Integer.parseInt(JOptionPane.showInputDialog(this, "Eliminar registros en base a:\n 1. Menor a llave ingresada \n 2. Mayor a llave ingresada"));
                int llaveIgresada = Integer.parseInt(JOptionPane.showInputDialog(this, "Ingresa llave de referencia: "));
                String registros = leerRegistros();
                String[] registroIndividual = registros.split("#");
                for (int i = 0; i < registroIndividual.length; i++) {
                    String[] temp = registroIndividual[i].split("\\|");
                    int llaveRegistro = Integer.parseInt(temp[indiceLlavePrimariaDecodificado - 1]);
                    if (op2 == 1 && llaveRegistro < llaveIgresada) {
                        llaveEliminar = Tree.search(llaveRegistro);

                        availList.addLast(llaveEliminar.getByteOff(), llaveEliminar.getLength());
                        if (availList.length() >= 2) {
                            availList.sort();
                        }
                        availList.saveAvail(fichero.getName().toString().replace(".txt", "_availList.txt"));
                        //String registros = leerRegistros();

                        //el guardado solo es temporal
                        availList.removeLast();

                        registros = registros.substring(0, llaveEliminar.getByteOff()) + "*" + registros.substring(llaveEliminar.getByteOff() + 1, registros.length());
                        Tree.remove(llaveRegistro);

                        escribirRegistros(registros);
                    } else if (op2 == 2 && llaveRegistro > llaveIgresada) {
                        llaveEliminar = Tree.search(llaveRegistro);

                        availList.addLast(llaveEliminar.getByteOff(), llaveEliminar.getLength());
                        if (availList.length() >= 2) {
                            availList.sort();
                        }
                        availList.saveAvail(fichero.getName().toString().replace(".txt", "_availList.txt"));
                        //String registros = leerRegistros();

                        //el guardado solo es temporal
                        availList.removeLast();

                        registros = registros.substring(0, llaveEliminar.getByteOff()) + "*" + registros.substring(llaveEliminar.getByteOff() + 1, registros.length());
                        Tree.remove(llaveRegistro);

                        escribirRegistros(registros);
                        JOptionPane.showMessageDialog(this, "Registro eliminado exitosamente.", "Exito", JOptionPane.INFORMATION_MESSAGE);
                        JOptionPane.showMessageDialog(this, "Recuerde indexar los indices para poder operar con los ultimos registros.", "OJO", JOptionPane.WARNING_MESSAGE);
                    }
                }
            }
        } catch (Exception e) {
        }
    }//GEN-LAST:event_btnRegistrosBorrarActionPerformed

    ArrayList<String> nombreCamposDesdeArchivo = new ArrayList();
    ArrayList<String> tipoDeCampoDesdeArchivo = new ArrayList();
    ArrayList<Integer> tamañoCampoDesdeArchivo = new ArrayList();

    public void actualizarReglasDeCampos() { // actualiza la definicion de los campos en memoria leyendolo directamente desde el archivo, utilizado en modificar registros, y listar campos.
        try {
            FileReader fr = null;
            BufferedReader br = null;
            fr = new FileReader(fichero);
            br = new BufferedReader(fr);
            String linea;
            int numLinea = 0;

            while ((linea = br.readLine()) != null) {
                String t[] = linea.split(",");
                for (int i = 0; i < t.length; i++) {

                    if (numLinea == 1) {
                        String p[] = t[i].split("#");
                        for (int j = 0; j < p.length; j++) {
                            String q[] = p[j].split("\\|");
                            for (int k = 0; k < q.length; k++) {
                                if (k == 0) {
                                    nombreCamposDesdeArchivo.add(q[k]);
                                }
                                if (k == 1) {
                                    tipoDeCampoDesdeArchivo.add(q[k]);
                                }
                                if (k == 2) {
                                    tamañoCampoDesdeArchivo.add(Integer.valueOf(q[k]));
                                }
                            }
                        }
                    } else {

                    }
                }
                numLinea++;
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Hay un error en la definicion de los campos, verifique que el archivo no este corrupto.", "ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void btnRegistrosModificarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRegistrosModificarActionPerformed
        try {
            int llaveRegistro = Integer.parseInt(JOptionPane.showInputDialog(this, "Ingresa la llave del registro a buscar:"));
            Llave llaveRegistros = Tree.search(llaveRegistro);
            if (llaveRegistros != null) {

                String stringRecibida = leerRegistros().substring(llaveRegistros.byteOff, llaveRegistros.byteOff + llaveRegistros.length);
                actualizarReglasDeCampos();

                String t[] = stringRecibida.split("\\|");
                String aux = "";
                for (int i = 0; i < t.length; i++) {
                    aux += i + " = " + t[i] + ", ";
                }

                int indiceRegistroAEditar = Integer.parseInt(JOptionPane.showInputDialog(aux + "\nIngrese el indice del campo que desea modificar del registro:"));
                boolean pasa = false;
                while (!pasa) {
                    if (tipoDeCampoDesdeArchivo.get(indiceRegistroAEditar).equals("char")) {
                        String stringNuevaARegistro = JOptionPane.showInputDialog("Ingrese la nueva string con size max de " + tamañoCampoDesdeArchivo.get(indiceRegistroAEditar) + ": ");
                        if (stringNuevaARegistro.length() <= tamañoCampoDesdeArchivo.get(indiceRegistroAEditar)) {
                            pasa = true;
                            t[indiceRegistroAEditar] = stringNuevaARegistro;
                        }
                    } else if (tipoDeCampoDesdeArchivo.get(indiceRegistroAEditar).equals("int")) {
                        try {
                            int enteroNuevoARegistro = Integer.parseInt(JOptionPane.showInputDialog("Ingrese el nuevo int con size max de " + tamañoCampoDesdeArchivo.get(indiceRegistroAEditar) + ": "));
                            if (String.valueOf(enteroNuevoARegistro).length() <= tamañoCampoDesdeArchivo.get(indiceRegistroAEditar)) {
                                pasa = true;
                                t[indiceRegistroAEditar] = String.valueOf(enteroNuevoARegistro);
                            }
                        } catch (Exception e) {
                            e.printStackTrace();
                            JOptionPane.showMessageDialog(this, "El int que se ingreso no es valido");
                        }
                    } else if (tipoDeCampoDesdeArchivo.get(indiceRegistroAEditar).equals("long")) {
                        try {
                            long longNuevoARegistro = Integer.parseInt(JOptionPane.showInputDialog("Ingrese el nuevo long con size max de " + tamañoCampoDesdeArchivo.get(indiceRegistroAEditar) + ": "));
                            if (String.valueOf(longNuevoARegistro).length() <= tamañoCampoDesdeArchivo.get(indiceRegistroAEditar)) {
                                pasa = true;
                                t[indiceRegistroAEditar] = String.valueOf(longNuevoARegistro);
                            }
                        } catch (Exception e) {
                            e.printStackTrace();
                            JOptionPane.showMessageDialog(this, "El long que se ingreso no es valido");
                        }
                    } else if (tipoDeCampoDesdeArchivo.get(indiceRegistroAEditar).equals("double")) {
                        try {
                            double doubleNuevoARegistro = Integer.parseInt(JOptionPane.showInputDialog("Ingrese el nuevo double con size max de " + tamañoCampoDesdeArchivo.get(indiceRegistroAEditar) + ": "));
                            if (String.valueOf(doubleNuevoARegistro).length() <= tamañoCampoDesdeArchivo.get(indiceRegistroAEditar)) {
                                pasa = true;
                                t[indiceRegistroAEditar] = String.valueOf(doubleNuevoARegistro);
                            }
                        } catch (Exception e) {
                            e.printStackTrace();
                            JOptionPane.showMessageDialog(this, "El long que se ingreso no es valido");
                        }
                    } else if (tipoDeCampoDesdeArchivo.get(indiceRegistroAEditar).equals("boolean")) {
                        int valorBooleanoNuevoARegistro = Integer.parseInt(JOptionPane.showInputDialog("Ingrese 0=false 1=true"));
                        if (valorBooleanoNuevoARegistro == 0) {
                            t[indiceRegistroAEditar] = "false";
                            pasa = true;
                        } else if (valorBooleanoNuevoARegistro == 1) {
                            t[indiceRegistroAEditar] = "true";
                            pasa = true;
                        }
                    }
                }

                String nuevoRegistro = "";
                for (int i = 0; i < t.length; i++) {
                    nuevoRegistro += t[i] + "|";
                }

                Tree.remove(llaveRegistro);

                String registrosActualizados = leerRegistros().replace(stringRecibida, nuevoRegistro);

                FileWriter fw = null;
                BufferedWriter bw = null;
                try {

                    fw = new FileWriter(fichero);
                    bw = new BufferedWriter(fw);

                    bw.write(metadata + "\n");
                    if (!camposDeterminados.contains(",")) {
                        camposDeterminados += ",";
                    }
                    bw.write(camposDeterminados + "\n");

                    bw.write(registrosActualizados);

                    bw.flush();
                } catch (Exception e) {
                }

                try {
                    bw.close();
                    fw.close();
                } catch (IOException ex) {
                }

                JOptionPane.showMessageDialog(this, "Registro modificado exitosamente.", "Exito", JOptionPane.INFORMATION_MESSAGE);
                JOptionPane.showMessageDialog(this, "Recuerde indexar los indices para poder operar con los ultimos registros.", "OJO", JOptionPane.WARNING_MESSAGE);

            } else {                                                                                                 //si el registro no existe
                JOptionPane.showMessageDialog(this, "El registro con llave " + llaveRegistro + " no existe.\n Intenta de nuevo");
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Se ingreso un dato o caracter no valido por favor verifique sus entradas", "ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnRegistrosModificarActionPerformed


    private void btnRegistrosListarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRegistrosListarActionPerformed

        try {
            String previewRegistros = "";

            boolean didItPass = false;
            try {
                FileReader fr = null;
                BufferedReader br = null;
                fr = new FileReader(fichero);
                br = new BufferedReader(fr);
                String linea;
                int numLinea = 0;

                while ((linea = br.readLine()) != null) {
                    String t[] = linea.split(",");
                    for (int i = 0; i < 3; i++) {

                        if (numLinea == 2) {
                            if (linea.length() > 850) {
                                previewRegistros = linea.substring(0, 850);
                                didItPass = true;
                            } else {

                                for (int j = 0; j < t[0].length(); j++) {
                                    if (t[0].charAt(j) != '#') {
                                        previewRegistros += t[0].charAt(j);
                                    } else {
                                        break;
                                    }
                                }

                            }
                        } else {

                        }
                    }
                    numLinea++;
                }
            } catch (Exception e) {
            }
            if (didItPass == true) {
                boolean pasa = false;
                while (!pasa) {
                    if (!previewRegistros.endsWith("#")) {
                        previewRegistros = removeLastChar(previewRegistros);

                    } else {
                        pasa = true;
                    }
                }
            } else {
                JOptionPane.showMessageDialog(this, "La cantidad de registros no es suficiente para un preview, se mostrara el primer registro.");
            }

            DefaultTableModel tabla = ((DefaultTableModel) tablaRegistrosListar.getModel());
            actualizarReglasDeCampos();
            tabla.setColumnCount(nombreCamposDesdeArchivo.size());
            tabla.setColumnIdentifiers(nombreCamposDesdeArchivo.toArray(new String[tipoDeCampoDesdeArchivo.size()]));

            String[] registrosIndividuales = previewRegistros.split("#");

            for (int j = 0; j < registrosIndividuales.length; j++) {
                String[] temp = registrosIndividuales[j].split("\\|");
                tabla.addRow(temp);
            }

            tablaRegistrosListar.setModel(tabla);
            jD_TablaListarRegistros.pack();
            jD_TablaListarRegistros.setLocationRelativeTo(this);
            jD_TablaListarRegistros.setVisible(true);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Ocurrio un error al listar los registros, por favor verifique el archivo de registros.", "ERROR", JOptionPane.ERROR_MESSAGE);
        }

    }//GEN-LAST:event_btnRegistrosListarActionPerformed

    private void btnCerrarDialogoTablaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCerrarDialogoTablaActionPerformed
        jD_TablaListarRegistros.setVisible(false);
    }//GEN-LAST:event_btnCerrarDialogoTablaActionPerformed

    private void btnIndicesIndexarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnIndicesIndexarActionPerformed
        //REINDEXAR INDICES
        String registros = leerRegistros();
        String temp[] = metadata.split(",");
        int llavePrimaria = Integer.parseInt(temp[2]);
        int llaveSecundaria = Integer.parseInt(temp[3]);

        if (indiceLlavePrimariaDecodificado == llavePrimaria) {
            indiceLlavePrimariaDecodificado = llaveSecundaria;
        } else {
            indiceLlavePrimariaDecodificado = llavePrimaria;
        }

        Tree = new BTree(6);

        ArrayList<Integer> regs = new ArrayList<Integer>();
        ArrayList<Integer> bytes = new ArrayList<Integer>();
        ArrayList<Integer> lenghts = new ArrayList<Integer>();
        String m[] = registros.split("#");
        for (int i = 0; i < m.length; i++) {
            if (m[i].charAt(0) != '*') {
                String n[] = m[i].split("\\|");
                regs.add(Integer.parseInt(n[indiceLlavePrimariaDecodificado - 1]));
                bytes.add(registros.indexOf(m[i]));
                lenghts.add(m[i].length());
            }
        }

        for (int i = 0; i < regs.size(); i++) {
            Tree.insert(regs.get(i), bytes.get(i), lenghts.get(i));
        }

        JOptionPane.showMessageDialog(this, "Indices creados exitosamente.");
    }//GEN-LAST:event_btnIndicesIndexarActionPerformed

    public void writeExcel() {
        HSSFWorkbook workbook = new HSSFWorkbook();
        HSSFSheet sheet = workbook.createSheet();

        FileReader fr = null;
        BufferedReader br = null;

        ArrayList<String> nombreEnCampos = new ArrayList();
        ArrayList<String> tipoEnCampos = new ArrayList();
        ArrayList<Integer> sizeEnCampos = new ArrayList();

        String nombreArchivo = fichero.getName();
        nombreArchivo = nombreArchivo.substring(0, nombreArchivo.length() - 4);

        try {
            fr = new FileReader(fichero);
            br = new BufferedReader(fr);
            String linea;

            int numLinea = 0;
            while ((linea = br.readLine()) != null) {
                String q[] = linea.split(",");
                for (int i = 0; i < q.length; i++) {
                    if (numLinea == 0) {
                        if (i == 1) {
                            nombreArchivo = q[i];
                        }
                    } else if (numLinea == 1) {
                        String p[] = q[i].split("#");
                        for (int j = 0; j < p.length; j++) {
                            String c[] = p[j].split("\\|");
                            for (int k = 0; k < c.length; k++) {
                                if (k == 0) {
                                    nombreEnCampos.add(c[k]);
                                }
                                if (k == 1) {
                                    tipoEnCampos.add(c[k]);
                                }
                                if (k == 2) {
                                    sizeEnCampos.add(Integer.valueOf(c[k]));
                                }
                            }
                        }
                    }
                }
                numLinea++;
            }
        } catch (Exception e) {
            e.printStackTrace();
        }

        try {
            br.close();
            fr.close();
        } catch (IOException ex) {
        }

        workbook.setSheetName(0, nombreArchivo);

        String[] headers = new String[nombreEnCampos.size()];
        for (int i = 0; i < nombreEnCampos.size(); i++) {
            headers[i] = nombreEnCampos.get(i);
        }

        CellStyle headerStyle = workbook.createCellStyle();
        HSSFFont font = workbook.createFont();
        font.setBold(true);
        headerStyle.setFont(font);

        CellStyle style = workbook.createCellStyle();
        style.setFillForegroundColor(IndexedColors.LIGHT_YELLOW.getIndex());
        style.setFillPattern(FillPatternType.SOLID_FOREGROUND);

        HSSFRow headerRow = sheet.createRow(0);
        for (int i = 0; i < headers.length; ++i) {
            String header = headers[i];
            HSSFCell cell = headerRow.createCell(i);
            cell.setCellStyle(headerStyle);
            cell.setCellValue(header);
        }

        String registros = leerRegistros();

        String[] p = registros.split("#");
        for (int j = 0; j < p.length; j++) {
            HSSFRow dataRow = sheet.createRow(j + 1);
            String[] t = p[j].split("\\|");
            for (int k = 0; k < t.length; k++) {
                if (!t[k].contains("*")) {
                    dataRow.createCell(k).setCellValue(t[k]);
                } else {
                    k += (nombreEnCampos.size() - 1);
                    sheet.removeRow(dataRow);
                }
            }
        }

        try {
            FileOutputStream file = new FileOutputStream(nombreArchivo + ".xls");
            workbook.write(file);
            file.close();
        } catch (Exception e) {
            e.printStackTrace();
        }

        JOptionPane.showMessageDialog(this, "Se han estandarizado correctamente los registros a excel");
    }

    private void btnEstandExportExcelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEstandExportExcelActionPerformed
        // TODO add your handling code here:
        writeExcel();
    }//GEN-LAST:event_btnEstandExportExcelActionPerformed

    public void abrirSegundoArchivo() {
        try {
            String infoGuardar = "";
            String nombreNuevoArchivo = fichero.getName().replace(".txt", "") + "_";

            String metadata2 = "";
//        String camposDeterminados2 = "";
//        String registrosDeterminados2 = "";
//        String listarCampos2 = "";
            int indiceLlavePrimariaDecodificado2;
            int indiceLlaveSecundariaDecodificado2;
            boolean existenRegistros = false;
//        archivoFueAbierto = true;
            File fichero2 = null;
            File ficheroAbrir = null;
            FileReader fr = null;
            BufferedReader br = null;

            ArrayList<String> nameCampos2 = new ArrayList();
            ArrayList<String> tipoCampo2 = new ArrayList();
            ArrayList<Integer> sizeCampo2 = new ArrayList();

            try {
                JFileChooser jfc = new JFileChooser("./");
                FileNameExtensionFilter filtro = new FileNameExtensionFilter("Archivos de Texto", "txt");
                FileNameExtensionFilter filtro2 = new FileNameExtensionFilter("Imagenes", "jpg", "png", "bmp");
                jfc.setFileFilter(filtro);
                jfc.addChoosableFileFilter(filtro2);
                int seleccion = jfc.showOpenDialog(this);
                if (seleccion == JFileChooser.APPROVE_OPTION) {
                    ficheroAbrir = jfc.getSelectedFile();

                    fichero2 = ficheroAbrir;                             //se actualiza que el nuevo fichero global es este
                    nombreNuevoArchivo += ficheroAbrir.getName().replace(".txt", "");

                    fr = new FileReader(ficheroAbrir);
                    br = new BufferedReader(fr);
                    String linea;
                    int numLinea = 0;

                    while ((linea = br.readLine()) != null) {
                        String t[] = linea.split(",");
                        for (int i = 0; i < t.length; i++) {

                            if (numLinea == 0) {                  //METADATA
                                metadata2 = linea;
                                if (t.length > 2) {
                                    indiceLlavePrimariaDecodificado2 = Integer.parseInt(t[2]);
                                }
                                if (t.length > 3) {
                                    indiceLlaveSecundariaDecodificado2 = Integer.parseInt(t[3]);
                                }
                            }
                            if (numLinea == 1) {                //CAMPOS
                                String p[] = t[i].split("#");
                                for (int j = 0; j < p.length; j++) {
                                    String q[] = p[j].split("\\|");
                                    for (int k = 0; k < q.length; k++) {
                                        if (k == 0) {
                                            nameCampos2.add(q[k]);
                                        }
                                        if (k == 1) {
                                            tipoCampo2.add(q[k]);
                                        }
                                        if (k == 2) {
                                            sizeCampo2.add(Integer.valueOf(q[k]));
                                        }
                                    }
                                }
                            } else if (numLinea == 2) {            //REGISTROS
                                existenRegistros = true;
                            }
                        }

                        numLinea++;
                    }
                }
            } catch (Exception e) {
                e.printStackTrace();
            }

            try {
                br.close();
                fr.close();
            } catch (IOException ex) {
            }

            //INTERPRETO LOS CAMPOS QUE TENGO EN EL ARCHIVO ACTUAL
            ArrayList<String> nombresParaCampos = new ArrayList<String>();
            ArrayList<String> tipoEnCampos = new ArrayList<String>();
            ArrayList<Integer> tamEnCampos = new ArrayList<Integer>();
            String camposAUsar = camposDeterminados;
            camposAUsar = removeLastChar(camposAUsar);

            String p[] = camposAUsar.split("#");
            for (int j = 0; j < p.length; j++) {
                String q[] = p[j].split("\\|");
                for (int k = 0; k < q.length; k++) {
                    if (k == 0) {
                        nombresParaCampos.add(q[k]);
                    }
                    if (k == 1) {
                        tipoEnCampos.add(q[k]);
                    }
                    if (k == 2) {
                        tamEnCampos.add(Integer.valueOf(q[k]));
                    }
                }
            }

            //COMPARO LOS CAMPOS Y VEO LOS QUE CUMPLAN LAS CONDICIONES
            ArrayList<String> camposNominados = new ArrayList<String>();

            String campos = "";
            int cant = 0;
            int mayor = nameCampos2.size();               //2
            int menor = nombresParaCampos.size();         //8
            if (mayor < menor) {
                menor = nameCampos2.size();
                mayor = nombresParaCampos.size();
            }

            for (int i = 0; i < nameCampos2.size(); i++) {
                for (int j = 0; j < nombresParaCampos.size(); j++) {
                    //if(nombresParaCampos.get(i).equals(nameCampos2.get(i)) && tipoEnCampos.get(i).equals(tipoCampo2.get(i)) && tamEnCampos.get(i).equals(sizeCampo2.get(i))){
                    if (nameCampos2.get(i).equals(nombresParaCampos.get(j)) && tipoCampo2.get(i).equals(tipoEnCampos.get(j)) && sizeCampo2.get(i).equals(tamEnCampos.get(j))) {
                        camposNominados.add(nameCampos2.get(i) + "|" + tipoCampo2.get(i) + "|" + sizeCampo2.get(i) + "|#");
                        if (menor == nameCampos2.size()) {
                            campos += Integer.toString(cant) + ". " + camposNominados.get(i) + "\n";
                        } else if (menor == nombresParaCampos.size()) {
                            campos += Integer.toString(cant) + ". " + camposNominados.get(j) + "\n";
                        }
                        cant++;
                    }
                }

            }

//        ArrayList<Integer> camposSeleccionados = new ArrayList<Integer>();
            JOptionPane.showMessageDialog(this, "Se encontraron " + camposNominados.size() + " campos comunes. Son: \n" + campos);
            int input;
            int tempCant = 0;
            for (int i = 0; i < camposNominados.size(); i++) {

                input = Integer.parseInt(JOptionPane.showInputDialog(this, "Deseas guardar este campo?: \n" + camposNominados.get(i) + "\n0. No\n" + "1. Sí"));
                if (input == 0 && tempCant != 0) {
                    camposNominados.remove(i);
                } else if (input < 0 || input > 1) {
                    boolean pasa = false;
                    while (!pasa) {
                        input = Integer.parseInt(JOptionPane.showInputDialog(this, "Ingrese una opcion valida. Deseas guardar este campo?: \n" + camposNominados.get(i) + "\n0. No\n" + "1. Sí"));
                        if (!(input < 0 || input > 1)) {
                            pasa = true;
                        }
                    }

                } else {
                    tempCant++;
                }

            }
            String camposNominadosListar = "";

            for (int i = 0; i < camposNominados.size(); i++) {
                camposNominadosListar += (i + 1) + " = " + camposNominados.get(i) + "\n";
            }

            ArrayList<String> tiposCamposNominados = new ArrayList();

            for (int i = 0; i < camposNominados.size(); i++) {
                String t[] = camposNominados.get(i).split("\\|");
                for (int j = 0; j < t.length; j++) {
                    if (j == 1) {
                        tiposCamposNominados.add(t[j]);
                    }
                }

            }

            input = Integer.parseInt(JOptionPane.showInputDialog(this, "Ingrese el indice de la llave primaria que desea utilizar?: \n" + camposNominadosListar));

            while (input < 0 || input > tiposCamposNominados.size()) {
                input = Integer.parseInt(JOptionPane.showInputDialog(this, "Ingrese el indice valido de la llave primaria que desea utilizar?: \n" + camposNominadosListar));
            }

            boolean candidato = false;

            if (!tiposCamposNominados.get(input - 1).equals("int")) {
                JOptionPane.showMessageDialog(this, "Ingrese un campo que sea de tipo entero para poder utilizarlo como llave primaria.", "ERROR EN LLAVE PRIMARIA", JOptionPane.ERROR_MESSAGE);
                JOptionPane.showMessageDialog(this, "Vuelva a iniciar el proceso.", "ERROR EN LLAVE PRIMARIA", JOptionPane.WARNING_MESSAGE);

            } else {
                candidato = true;
            }

            if (candidato) {
                infoGuardar += "METADATA," + nombreNuevoArchivo + "," + input + "," + input + "," + "\n";
                for (int i = 0; i < camposNominados.size(); i++) {
                    infoGuardar += camposNominados.get(i);
                }
                infoGuardar += ",";

                //CREAR ARCHIVO
                FileWriter fw = null;
                BufferedWriter bw = null;
                FileWriter fw2 = null;
                BufferedWriter bw2 = null;
                File ficheroNuevo = new File(nombreNuevoArchivo + ".txt");
                File ficheroNuevoAvail = new File(nombreNuevoArchivo + "_availList.txt");
                try {
                    fw = new FileWriter(ficheroNuevo);
                    bw = new BufferedWriter(fw);
                    bw.write(infoGuardar);
                    bw.flush();

                    fw2 = new FileWriter(ficheroNuevoAvail);
                    bw2 = new BufferedWriter(fw);
                    bw2.write("");
                    bw2.flush();
                    JOptionPane.showMessageDialog(this, "Archivo guardado exitosamente en " + ficheroNuevo.toString());
                } catch (Exception e) {
                    e.printStackTrace();
                }
                try {
                    bw.close();
                    fw.close();
                    bw2.close();
                    fw2.close();
                } catch (IOException ex) {
                    ex.printStackTrace();
                }
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Se ingreso un caracter o dato no valido por favor verificar sus entradas", "ERROR", JOptionPane.ERROR_MESSAGE);
        }

    }

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        JOptionPane.showMessageDialog(this, "Selecciona el segundo archivo con el que querés hacer sopa de mondongo");
        abrirSegundoArchivo();
    }//GEN-LAST:event_jButton1ActionPerformed

    public void crearXSL() {
        try {
            DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
            DocumentBuilder builder = factory.newDocumentBuilder();
            DOMImplementation implementation = builder.getDOMImplementation();
            String nombreArchivo = fichero.getName();
            nombreArchivo = nombreArchivo.substring(0, nombreArchivo.length() - 4);
            Document documento = implementation.createDocument(null, nombreArchivo, null);
            documento.setXmlVersion("1.0");

            FileReader fr = new FileReader(fichero);
            BufferedReader br = new BufferedReader(fr);
            String linea;
            int numLinea = 0;
            ArrayList<String> nameCampos = new ArrayList();
            ArrayList<String> tipoCampo = new ArrayList();
            ArrayList<Integer> sizeCampo = new ArrayList();

            while ((linea = br.readLine()) != null) {
                String t[] = linea.split(",");
                for (int i = 0; i < t.length; i++) {

                    if (numLinea == 1) {
                        String p[] = t[i].split("#");
                        for (int j = 0; j < p.length; j++) {
                            String q[] = p[j].split("\\|");
                            for (int k = 0; k < q.length; k++) {
                                if (k == 0) {
                                    nameCampos.add(q[k]);
                                }
                                if (k == 1) {
                                    tipoCampo.add(q[k]);
                                }
                                if (k == 2) {
                                    sizeCampo.add(Integer.valueOf(q[k]));
                                }
                            }
                        }
                    }
                }
                numLinea++;
            }

            Element stylesheet = documento.createElement("xsl:stylesheet");
            stylesheet.setAttribute("xmlns:xsl", "http://www.w3.org/1999/XSL/Transform");
            stylesheet.setAttribute("version", "1.0");
            Element template = documento.createElement("xsl:template");
            template.setAttribute("match", "/");
            Element html = documento.createElement("html");

            Element head = documento.createElement("head");
            Element title = documento.createElement("title");
            Text textoTitle = documento.createTextNode(nombreArchivo);
            title.appendChild(textoTitle);
            head.appendChild(title);

            Element body = documento.createElement("body");
            Element table = documento.createElement("table");
            table.setAttribute("border", "1");
            Element tr1 = documento.createElement("tr");

            for (int i = 0; i < nameCampos.size(); i++) {
                Element th = documento.createElement("th");
                Text textTH = documento.createTextNode(nameCampos.get(i));
                th.appendChild(textTH);
                tr1.appendChild(th);
            }

            table.appendChild(tr1);

            Element cabezaDeDatos = documento.createElement("xsl:for-each");
            cabezaDeDatos.setAttribute("select", "registros/registro");
            Element tr2 = documento.createElement("tr");

            for (int i = 0; i < nameCampos.size(); i++) {
                Element td = documento.createElement("td");
                Element valueOf = documento.createElement("xsl:value-of");
                valueOf.setAttribute("select", nameCampos.get(i));
                td.appendChild(valueOf);
                tr2.appendChild(td);
            }

            cabezaDeDatos.appendChild(tr2);
            table.appendChild(cabezaDeDatos);
            body.appendChild(table);
            html.appendChild(body);
            template.appendChild(html);
            stylesheet.appendChild(template);

            documento.getDocumentElement().appendChild(stylesheet);

            Source source = new DOMSource(documento);
            Result result = new StreamResult(new File(nombreArchivo + ".xsl"));

            Transformer transformer = TransformerFactory.newInstance().newTransformer();
            transformer.transform(source, result);

        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Hubo un error con los datos en el archivo, verifique si no esta dañado.", "Error en el archivo", JOptionPane.ERROR_MESSAGE);
        }

    }

    public void crearXML() {
        try {
            DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
            DocumentBuilder builder = factory.newDocumentBuilder();
            DOMImplementation implementation = builder.getDOMImplementation();
            String nombreArchivo = fichero.getName();
            nombreArchivo = nombreArchivo.substring(0, nombreArchivo.length() - 4);
            Document documento = implementation.createDocument(null, nombreArchivo, null);
            documento.setXmlVersion("1.0");

            FileReader fr = new FileReader(fichero);
            BufferedReader br = new BufferedReader(fr);
            String linea;
            int numLinea = 0;
            ArrayList<String> nameCampos = new ArrayList();
            ArrayList<String> tipoCampo = new ArrayList();
            ArrayList<Integer> sizeCampo = new ArrayList();

            while ((linea = br.readLine()) != null) {
                String t[] = linea.split(",");
                for (int i = 0; i < t.length; i++) {

                    if (numLinea == 1) {
                        String p[] = t[i].split("#");
                        for (int j = 0; j < p.length; j++) {
                            String q[] = p[j].split("\\|");
                            for (int k = 0; k < q.length; k++) {
                                if (k == 0) {
                                    nameCampos.add(q[k]);
                                }
                                if (k == 1) {
                                    tipoCampo.add(q[k]);
                                }
                                if (k == 2) {
                                    sizeCampo.add(Integer.valueOf(q[k]));
                                }
                            }
                        }
                    }
                }
                numLinea++;
            }
            Element registros = documento.createElement("registros");
            String reg = leerRegistros();
            String[] a = reg.split("#");

            for (int i = 0; i < a.length; i++) {
                Element registro = documento.createElement("registro");
                String[] o = a[i].split("\\|");
                for (int j = 0; j < o.length; j++) {
                    if (!o[j].contains("*")) {
                        Element tipoDeDato = documento.createElement(nameCampos.get(j));
                        Text textDato = documento.createTextNode(o[j]);
                        tipoDeDato.appendChild(textDato);
                        registro.appendChild(tipoDeDato);
                    } else {
                        j += (nameCampos.size() - 1);
                    }

                }
                registros.appendChild(registro);
            }

            documento.getDocumentElement().appendChild(registros);

            Source source = new DOMSource(documento);
            Result result = new StreamResult(new File(nombreArchivo + ".xml"));

            Transformer transformer = TransformerFactory.newInstance().newTransformer();
            transformer.transform(source, result);

        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Hubo un error con los datos en el archivo, verifique si no esta dañado.", "Error en el archivo", JOptionPane.ERROR_MESSAGE);
        }

    }


    private void btnEstandXMLSchemaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEstandXMLSchemaActionPerformed
        // TODO add your handling code here:

        try {
            crearXSL();
            crearXML();
            JOptionPane.showMessageDialog(this, "Se exporto el archivo correctamente", "Exito en operacion", JOptionPane.PLAIN_MESSAGE);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Hiciste un cagadal", "Exito en operacion", JOptionPane.PLAIN_MESSAGE);
        }
    }//GEN-LAST:event_btnEstandXMLSchemaActionPerformed

    String camposDeterminados = "";
    String listarCampos = "";
    String registrosDeterminados = "";
    int indiceLlavePrimariaDecodificado;
    int indiceLlaveSecundariaDecodificado;
    int numCampos = 0;
    File fichero = null;
    BTree Tree;
    DoublyLinkedList availList = new DoublyLinkedList();

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(main.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(main.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(main.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(main.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new main().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnArchivoAbrir;
    private javax.swing.JButton btnArchivoCerrar;
    private javax.swing.JButton btnArchivoNuevo;
    private javax.swing.JButton btnArchivoSalir;
    private javax.swing.JButton btnArchivoSalvar;
    private javax.swing.JButton btnCamposBorrar;
    private javax.swing.JButton btnCamposCrear;
    private javax.swing.JButton btnCamposListar;
    private javax.swing.JButton btnCamposModificar;
    private javax.swing.JButton btnCamposSalir;
    private javax.swing.JButton btnCerrarDialogoTabla;
    private javax.swing.JButton btnEstandExportExcel;
    private javax.swing.JButton btnEstandSalir;
    private javax.swing.JButton btnEstandXMLSchema;
    private javax.swing.JButton btnIndicesCrear;
    private javax.swing.JButton btnIndicesIndexar;
    private javax.swing.JButton btnIndicesSalir;
    private javax.swing.JButton btnMainMenuArchivo;
    private javax.swing.JButton btnMainMenuCampos;
    private javax.swing.JButton btnMainMenuEstandarizacion;
    private javax.swing.JButton btnMainMenuIndices;
    private javax.swing.JButton btnMainMenuRegistros;
    private javax.swing.JButton btnMainMenuSalir;
    private javax.swing.JButton btnRegistrosBorrar;
    private javax.swing.JButton btnRegistrosBuscar;
    private javax.swing.JButton btnRegistrosIntroducir;
    private javax.swing.JButton btnRegistrosListar;
    private javax.swing.JButton btnRegistrosModificar;
    private javax.swing.JButton btnRegistrosSalir;
    private javax.swing.JButton jButton1;
    private javax.swing.JDialog jD_Archivo;
    private javax.swing.JDialog jD_Campos;
    private javax.swing.JDialog jD_Estandarizacion;
    private javax.swing.JDialog jD_Indices;
    private javax.swing.JDialog jD_Registros;
    private javax.swing.JDialog jD_TablaListarRegistros;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tablaRegistrosListar;
    // End of variables declaration//GEN-END:variables
}
