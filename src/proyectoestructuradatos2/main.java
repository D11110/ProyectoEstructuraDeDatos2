/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package proyectoestructuradatos2;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Daniel
 */
public class main extends javax.swing.JFrame {

    /**
     * Creates new form main
     */
    public main() {
        initComponents();
        archivoCerrado();
//        BTree t = new BTree(3);
//        System.out.println("Insertando 1");
//        t.insert(1);
//        t.traverse();
//        System.out.println();
//        System.out.println("Insertando 3");
//        t.insert(3);
//        t.traverse();
//        System.out.println();
//        System.out.println("Insertando 8");
//        t.insert(8);
//        t.traverse();
//        System.out.println();
//        System.out.println("Insertando 10");
//        t.insert(10);
//        t.traverse();
//        System.out.println();
//        System.out.println("Insertando 11");
//        t.insert(11);
//        t.traverse();
//        System.out.println();
//        System.out.println("Insertando 28");
//        t.insert(28);
//        t.traverse();
//        System.out.println();
//        System.out.println("Insertando 24");
//        t.insert(24);
//        t.traverse();
//        System.out.println();
//        System.out.println("Insertando 25");
//        t.insert(25);
//        t.traverse();
//        System.out.println();
//        System.out.println("Insertando 21");
//        t.insert(21);
//        t.traverse();
//        System.out.println();
//        System.out.println("Insertando 29");
//        t.insert(29);
//        t.traverse();
//        System.out.println();
//        System.out.println("Insertando 20");
//        t.insert(20);
//        t.traverse();
//        System.out.println();
//        System.out.println("Insertando 22");
//        t.insert(22);
//        t.traverse();
//        System.out.println();
//        System.out.println("Insertando 2");
//        t.insert(2);
//        t.traverse();
//        System.out.println();
//
//        t.remove(25);
//        System.out.println("Eliminando 25");
//        t.traverse();
//        System.out.println();
//
//        t.remove(28);
//        System.out.println("Eliminando 28");
//        t.traverse();
//        System.out.println();
//
//        t.remove(3);
//        System.out.println("Eliminando 3");
//        t.traverse();
//        System.out.println();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jD_Archivo = new javax.swing.JDialog();
        btnArchivoAbrir = new javax.swing.JButton();
        btnArchivoSalvar = new javax.swing.JButton();
        btnArchivoCerrar = new javax.swing.JButton();
        btnArchivoSalir = new javax.swing.JButton();
        btnArchivoNuevo = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jD_Campos = new javax.swing.JDialog();
        btnCamposCrear = new javax.swing.JButton();
        btnCamposListar = new javax.swing.JButton();
        btnCamposModificar = new javax.swing.JButton();
        btnCamposBorrar = new javax.swing.JButton();
        btnCamposSalir = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jD_Registros = new javax.swing.JDialog();
        btnRegistrosIntroducir = new javax.swing.JButton();
        btnRegistrosModificar = new javax.swing.JButton();
        btnRegistrosBuscar = new javax.swing.JButton();
        btnRegistrosBorrar = new javax.swing.JButton();
        btnRegistrosListar = new javax.swing.JButton();
        btnRegistrosSalir = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jD_Indices = new javax.swing.JDialog();
        btnIndicesCrear = new javax.swing.JButton();
        btnIndicesIndexar = new javax.swing.JButton();
        btnIndicesSalir = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jD_Estandarizacion = new javax.swing.JDialog();
        btnEstandExportExcel = new javax.swing.JButton();
        btnEstandXMLSchema = new javax.swing.JButton();
        btnEstandSalir = new javax.swing.JButton();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jD_TablaListarRegistros = new javax.swing.JDialog();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablaRegistrosListar = new javax.swing.JTable();
        btnCerrarDialogoTabla = new javax.swing.JButton();
        btnMainMenuArchivo = new javax.swing.JButton();
        btnMainMenuCampos = new javax.swing.JButton();
        btnMainMenuRegistros = new javax.swing.JButton();
        btnMainMenuIndices = new javax.swing.JButton();
        btnMainMenuEstandarizacion = new javax.swing.JButton();
        btnMainMenuSalir = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();

        jD_Archivo.setMinimumSize(new java.awt.Dimension(489, 450));
        jD_Archivo.getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        btnArchivoAbrir.setFont(new java.awt.Font("Eras Light ITC", 0, 18)); // NOI18N
        btnArchivoAbrir.setText("Abrir archivo");
        btnArchivoAbrir.setMaximumSize(new java.awt.Dimension(100, 20));
        btnArchivoAbrir.setMinimumSize(new java.awt.Dimension(100, 20));
        btnArchivoAbrir.setPreferredSize(new java.awt.Dimension(100, 20));
        btnArchivoAbrir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnArchivoAbrirActionPerformed(evt);
            }
        });
        jD_Archivo.getContentPane().add(btnArchivoAbrir, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 131, 180, 30));

        btnArchivoSalvar.setFont(new java.awt.Font("Eras Light ITC", 0, 18)); // NOI18N
        btnArchivoSalvar.setText("Salvar archivo");
        btnArchivoSalvar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnArchivoSalvarActionPerformed(evt);
            }
        });
        jD_Archivo.getContentPane().add(btnArchivoSalvar, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 172, 180, 30));

        btnArchivoCerrar.setFont(new java.awt.Font("Eras Light ITC", 0, 18)); // NOI18N
        btnArchivoCerrar.setText("Cerrar archivo");
        btnArchivoCerrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnArchivoCerrarActionPerformed(evt);
            }
        });
        jD_Archivo.getContentPane().add(btnArchivoCerrar, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 213, 180, 30));

        btnArchivoSalir.setFont(new java.awt.Font("Eras Light ITC", 0, 14)); // NOI18N
        btnArchivoSalir.setText("Salir");
        btnArchivoSalir.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnArchivoSalirMouseClicked(evt);
            }
        });
        jD_Archivo.getContentPane().add(btnArchivoSalir, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 360, -1, -1));

        btnArchivoNuevo.setFont(new java.awt.Font("Eras Light ITC", 0, 18)); // NOI18N
        btnArchivoNuevo.setText("Nuevo archivo");
        btnArchivoNuevo.setMaximumSize(new java.awt.Dimension(100, 20));
        btnArchivoNuevo.setMinimumSize(new java.awt.Dimension(100, 20));
        btnArchivoNuevo.setPreferredSize(new java.awt.Dimension(100, 20));
        btnArchivoNuevo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnArchivoNuevoActionPerformed(evt);
            }
        });
        jD_Archivo.getContentPane().add(btnArchivoNuevo, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 90, 180, 30));

        jLabel2.setFont(new java.awt.Font("Eras Light ITC", 0, 48)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Archivo");
        jD_Archivo.getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 11, -1, -1));

        jLabel7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/proyectoestructuradatos2/imgs/gradientarchivebg.png"))); // NOI18N
        jLabel7.setMaximumSize(new java.awt.Dimension(489, 416));
        jLabel7.setMinimumSize(new java.awt.Dimension(489, 416));
        jLabel7.setPreferredSize(new java.awt.Dimension(489, 416));
        jD_Archivo.getContentPane().add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(-10, -100, 530, 630));

        jD_Campos.setMinimumSize(new java.awt.Dimension(400, 400));
        jD_Campos.getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        btnCamposCrear.setFont(new java.awt.Font("Eras Light ITC", 0, 18)); // NOI18N
        btnCamposCrear.setText("Crear campos");
        btnCamposCrear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCamposCrearActionPerformed(evt);
            }
        });
        jD_Campos.getContentPane().add(btnCamposCrear, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 90, 170, -1));

        btnCamposListar.setFont(new java.awt.Font("Eras Light ITC", 0, 18)); // NOI18N
        btnCamposListar.setText("Listar campos");
        btnCamposListar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCamposListarActionPerformed(evt);
            }
        });
        jD_Campos.getContentPane().add(btnCamposListar, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 130, 170, -1));

        btnCamposModificar.setFont(new java.awt.Font("Eras Light ITC", 0, 18)); // NOI18N
        btnCamposModificar.setText("Modificar campos");
        btnCamposModificar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCamposModificarActionPerformed(evt);
            }
        });
        jD_Campos.getContentPane().add(btnCamposModificar, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 170, 170, -1));

        btnCamposBorrar.setFont(new java.awt.Font("Eras Light ITC", 0, 18)); // NOI18N
        btnCamposBorrar.setText("Borrar campos");
        btnCamposBorrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCamposBorrarActionPerformed(evt);
            }
        });
        jD_Campos.getContentPane().add(btnCamposBorrar, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 210, 170, -1));

        btnCamposSalir.setFont(new java.awt.Font("Eras Light ITC", 0, 18)); // NOI18N
        btnCamposSalir.setText("Salir");
        btnCamposSalir.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnCamposSalirMouseClicked(evt);
            }
        });
        jD_Campos.getContentPane().add(btnCamposSalir, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 360, -1, -1));

        jLabel1.setFont(new java.awt.Font("Eras Light ITC", 0, 48)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Campos");
        jD_Campos.getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 11, -1, -1));

        jLabel8.setIcon(new javax.swing.ImageIcon(getClass().getResource("/proyectoestructuradatos2/imgs/gradientarchivebg.png"))); // NOI18N
        jD_Campos.getContentPane().add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(-10, 0, -1, -1));

        jD_Registros.setMinimumSize(new java.awt.Dimension(400, 400));
        jD_Registros.getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        btnRegistrosIntroducir.setFont(new java.awt.Font("Eras Light ITC", 0, 18)); // NOI18N
        btnRegistrosIntroducir.setText("Introducir registros");
        btnRegistrosIntroducir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRegistrosIntroducirActionPerformed(evt);
            }
        });
        jD_Registros.getContentPane().add(btnRegistrosIntroducir, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 95, 174, 39));

        btnRegistrosModificar.setFont(new java.awt.Font("Eras Light ITC", 0, 18)); // NOI18N
        btnRegistrosModificar.setText("Modificar registros");
        btnRegistrosModificar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRegistrosModificarActionPerformed(evt);
            }
        });
        jD_Registros.getContentPane().add(btnRegistrosModificar, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 143, 174, 39));

        btnRegistrosBuscar.setFont(new java.awt.Font("Eras Light ITC", 0, 18)); // NOI18N
        btnRegistrosBuscar.setText("Buscar registros");
        btnRegistrosBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRegistrosBuscarActionPerformed(evt);
            }
        });
        jD_Registros.getContentPane().add(btnRegistrosBuscar, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 188, 174, 39));

        btnRegistrosBorrar.setFont(new java.awt.Font("Eras Light ITC", 0, 18)); // NOI18N
        btnRegistrosBorrar.setText("Borrar registros");
        btnRegistrosBorrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRegistrosBorrarActionPerformed(evt);
            }
        });
        jD_Registros.getContentPane().add(btnRegistrosBorrar, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 233, 174, 39));

        btnRegistrosListar.setFont(new java.awt.Font("Eras Light ITC", 0, 18)); // NOI18N
        btnRegistrosListar.setText("Listar registros");
        btnRegistrosListar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRegistrosListarActionPerformed(evt);
            }
        });
        jD_Registros.getContentPane().add(btnRegistrosListar, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 278, 174, 39));

        btnRegistrosSalir.setFont(new java.awt.Font("Eras Light ITC", 0, 18)); // NOI18N
        btnRegistrosSalir.setText("Salir");
        btnRegistrosSalir.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnRegistrosSalirMouseClicked(evt);
            }
        });
        jD_Registros.getContentPane().add(btnRegistrosSalir, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 350, 70, 33));

        jLabel3.setFont(new java.awt.Font("Eras Light ITC", 0, 48)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Registros");
        jD_Registros.getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 11, -1, -1));

        jLabel9.setIcon(new javax.swing.ImageIcon(getClass().getResource("/proyectoestructuradatos2/imgs/gradientarchivebg.png"))); // NOI18N
        jD_Registros.getContentPane().add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(-10, 0, -1, 440));

        jD_Indices.setMinimumSize(new java.awt.Dimension(400, 400));
        jD_Indices.getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        btnIndicesCrear.setFont(new java.awt.Font("Eras Light ITC", 0, 18)); // NOI18N
        btnIndicesCrear.setText("Crear indices");
        btnIndicesCrear.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnIndicesCrearMouseClicked(evt);
            }
        });
        jD_Indices.getContentPane().add(btnIndicesCrear, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 94, 163, 36));

        btnIndicesIndexar.setFont(new java.awt.Font("Eras Light ITC", 0, 18)); // NOI18N
        btnIndicesIndexar.setText("Re-indexar indices");
        btnIndicesIndexar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnIndicesIndexarActionPerformed(evt);
            }
        });
        jD_Indices.getContentPane().add(btnIndicesIndexar, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 136, -1, 36));

        btnIndicesSalir.setFont(new java.awt.Font("Eras Light ITC", 0, 18)); // NOI18N
        btnIndicesSalir.setText("Salir");
        btnIndicesSalir.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnIndicesSalirMouseClicked(evt);
            }
        });
        jD_Indices.getContentPane().add(btnIndicesSalir, new org.netbeans.lib.awtextra.AbsoluteConstraints(311, 351, 79, 38));

        jLabel4.setFont(new java.awt.Font("Eras Light ITC", 0, 48)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("Indices");
        jD_Indices.getContentPane().add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 11, -1, -1));

        jLabel10.setIcon(new javax.swing.ImageIcon(getClass().getResource("/proyectoestructuradatos2/imgs/gradientarchivebg.png"))); // NOI18N
        jD_Indices.getContentPane().add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(-40, 0, -1, -1));

        jD_Estandarizacion.setMinimumSize(new java.awt.Dimension(400, 400));
        jD_Estandarizacion.getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        btnEstandExportExcel.setFont(new java.awt.Font("Eras Light ITC", 0, 18)); // NOI18N
        btnEstandExportExcel.setText("Exportar excel");
        jD_Estandarizacion.getContentPane().add(btnEstandExportExcel, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 84, 229, 39));

        btnEstandXMLSchema.setFont(new java.awt.Font("Eras Light ITC", 0, 18)); // NOI18N
        btnEstandXMLSchema.setText("Exportar XML con Schema");
        jD_Estandarizacion.getContentPane().add(btnEstandXMLSchema, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 134, -1, 39));

        btnEstandSalir.setFont(new java.awt.Font("Eras Light ITC", 0, 18)); // NOI18N
        btnEstandSalir.setText("Salir");
        btnEstandSalir.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnEstandSalirMouseClicked(evt);
            }
        });
        jD_Estandarizacion.getContentPane().add(btnEstandSalir, new org.netbeans.lib.awtextra.AbsoluteConstraints(303, 345, 78, 44));

        jLabel11.setFont(new java.awt.Font("Eras Light ITC", 0, 48)); // NOI18N
        jLabel11.setForeground(new java.awt.Color(255, 255, 255));
        jLabel11.setText("Estandarizacion");
        jD_Estandarizacion.getContentPane().add(jLabel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 11, -1, -1));

        jLabel12.setIcon(new javax.swing.ImageIcon(getClass().getResource("/proyectoestructuradatos2/imgs/gradientarchivebg.png"))); // NOI18N
        jD_Estandarizacion.getContentPane().add(jLabel12, new org.netbeans.lib.awtextra.AbsoluteConstraints(-50, -10, -1, -1));

        jD_TablaListarRegistros.setMinimumSize(new java.awt.Dimension(800, 500));
        jD_TablaListarRegistros.getContentPane().setLayout(null);

        tablaRegistrosListar.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tablaRegistrosListar);

        jD_TablaListarRegistros.getContentPane().add(jScrollPane1);
        jScrollPane1.setBounds(40, 20, 700, 370);

        btnCerrarDialogoTabla.setText("Salir");
        btnCerrarDialogoTabla.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCerrarDialogoTablaActionPerformed(evt);
            }
        });
        jD_TablaListarRegistros.getContentPane().add(btnCerrarDialogoTabla);
        btnCerrarDialogoTabla.setBounds(660, 410, 80, 30);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(600, 600));
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        btnMainMenuArchivo.setFont(new java.awt.Font("Eras Light ITC", 0, 36)); // NOI18N
        btnMainMenuArchivo.setText("Archivo");
        btnMainMenuArchivo.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnMainMenuArchivoMouseClicked(evt);
            }
        });
        getContentPane().add(btnMainMenuArchivo, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 100, 179, -1));

        btnMainMenuCampos.setFont(new java.awt.Font("Eras Light ITC", 0, 36)); // NOI18N
        btnMainMenuCampos.setText("Campos");
        btnMainMenuCampos.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnMainMenuCamposMouseClicked(evt);
            }
        });
        getContentPane().add(btnMainMenuCampos, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 100, 160, -1));

        btnMainMenuRegistros.setFont(new java.awt.Font("Eras Light ITC", 0, 36)); // NOI18N
        btnMainMenuRegistros.setText("Registros");
        btnMainMenuRegistros.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnMainMenuRegistrosMouseClicked(evt);
            }
        });
        getContentPane().add(btnMainMenuRegistros, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 170, 180, -1));

        btnMainMenuIndices.setFont(new java.awt.Font("Eras Light ITC", 0, 36)); // NOI18N
        btnMainMenuIndices.setText("Indices");
        btnMainMenuIndices.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnMainMenuIndicesMouseClicked(evt);
            }
        });
        getContentPane().add(btnMainMenuIndices, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 170, 159, -1));

        btnMainMenuEstandarizacion.setFont(new java.awt.Font("Eras Light ITC", 0, 36)); // NOI18N
        btnMainMenuEstandarizacion.setText("Estandarizacion");
        btnMainMenuEstandarizacion.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnMainMenuEstandarizacionMouseClicked(evt);
            }
        });
        getContentPane().add(btnMainMenuEstandarizacion, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 240, -1, -1));

        btnMainMenuSalir.setFont(new java.awt.Font("Eras Light ITC", 0, 24)); // NOI18N
        btnMainMenuSalir.setText("Salir");
        btnMainMenuSalir.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnMainMenuSalirMouseClicked(evt);
            }
        });
        getContentPane().add(btnMainMenuSalir, new org.netbeans.lib.awtextra.AbsoluteConstraints(439, 481, 100, 40));

        jLabel6.setFont(new java.awt.Font("Eras Light ITC", 0, 56)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setText("Standard File Manager");
        getContentPane().add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, -1, -1));

        jLabel5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/proyectoestructuradatos2/imgs/bgproyecto.jpg"))); // NOI18N
        getContentPane().add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(-20, 0, 660, 620));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public void archivoCerrado() {
        btnArchivoAbrir.setEnabled(true);
        btnArchivoNuevo.setEnabled(true);
        btnCamposCrear.setEnabled(false);
        btnCamposModificar.setEnabled(false);
        btnCamposBorrar.setEnabled(false);
        btnCamposListar.setEnabled(false);
        btnArchivoSalvar.setEnabled(false);
        btnArchivoCerrar.setEnabled(false);
    }

    public void archivoAbierto() {
        btnArchivoAbrir.setEnabled(false);
        btnArchivoNuevo.setEnabled(false);
        btnCamposCrear.setEnabled(true);
        btnCamposModificar.setEnabled(true);
        btnCamposBorrar.setEnabled(true);
        btnCamposListar.setEnabled(true);
        btnArchivoSalvar.setEnabled(true);
        btnArchivoCerrar.setEnabled(true);
    }

    private void btnMainMenuArchivoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnMainMenuArchivoMouseClicked
        // TODO add your handling code here:
        jD_Archivo.pack();
        jD_Archivo.setLocationRelativeTo(this);
        jD_Archivo.setVisible(true);
        setVisible(false);
    }//GEN-LAST:event_btnMainMenuArchivoMouseClicked

    private void btnMainMenuSalirMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnMainMenuSalirMouseClicked
        // TODO add your handling code here:
        System.exit(0);
    }//GEN-LAST:event_btnMainMenuSalirMouseClicked

    private void btnArchivoSalirMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnArchivoSalirMouseClicked
        // TODO add your handling code here:
        jD_Archivo.pack();
        jD_Archivo.setLocationRelativeTo(this);
        jD_Archivo.setVisible(false);
        setVisible(true);
    }//GEN-LAST:event_btnArchivoSalirMouseClicked

    private void btnMainMenuCamposMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnMainMenuCamposMouseClicked
        // TODO add your handling code here:
        jD_Campos.pack();
        jD_Campos.setLocationRelativeTo(this);
        jD_Campos.setVisible(true);
        setVisible(false);
    }//GEN-LAST:event_btnMainMenuCamposMouseClicked

    private void btnCamposSalirMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnCamposSalirMouseClicked
        // TODO add your handling code here:
        jD_Campos.pack();
        jD_Campos.setLocationRelativeTo(this);
        jD_Campos.setVisible(false);
        setVisible(true);
    }//GEN-LAST:event_btnCamposSalirMouseClicked

    private void btnMainMenuRegistrosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnMainMenuRegistrosMouseClicked
        // TODO add your handling code here:
        jD_Registros.pack();
        jD_Registros.setLocationRelativeTo(this);
        jD_Registros.setVisible(true);
        setVisible(false);
    }//GEN-LAST:event_btnMainMenuRegistrosMouseClicked

    private void btnRegistrosSalirMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnRegistrosSalirMouseClicked
        // TODO add your handling code here:
        jD_Registros.pack();
        jD_Registros.setLocationRelativeTo(this);
        jD_Registros.setVisible(false);
        setVisible(true);
    }//GEN-LAST:event_btnRegistrosSalirMouseClicked

    private void btnMainMenuIndicesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnMainMenuIndicesMouseClicked
        // TODO add your handling code here:
        jD_Indices.pack();
        jD_Indices.setLocationRelativeTo(this);
        jD_Indices.setVisible(true);
        setVisible(false);
    }//GEN-LAST:event_btnMainMenuIndicesMouseClicked

    private void btnIndicesSalirMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnIndicesSalirMouseClicked
        // TODO add your handling code here:
        jD_Indices.pack();
        jD_Indices.setLocationRelativeTo(this);
        jD_Indices.setVisible(false);
        setVisible(true);
    }//GEN-LAST:event_btnIndicesSalirMouseClicked

    private void btnMainMenuEstandarizacionMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnMainMenuEstandarizacionMouseClicked
        // TODO add your handling code here:
        jD_Estandarizacion.pack();
        jD_Estandarizacion.setLocationRelativeTo(this);
        jD_Estandarizacion.setVisible(true);
        setVisible(false);
    }//GEN-LAST:event_btnMainMenuEstandarizacionMouseClicked

    private void btnEstandSalirMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnEstandSalirMouseClicked
        // TODO add your handling code here:
        jD_Estandarizacion.pack();
        jD_Estandarizacion.setLocationRelativeTo(this);
        jD_Estandarizacion.setVisible(false);
        setVisible(true);
    }//GEN-LAST:event_btnEstandSalirMouseClicked

    String metadata = "";
    boolean archivoFueAbierto = false;

    public void actualizarCampos(String nombreCampo, String tipoCampo, int longitudCampo) {
        camposDeterminados += nombreCampo + "|" + tipoCampo + "|" + longitudCampo + "|#";
    }

    public void listaCampos(String camposConcatenados) {
        if (camposConcatenados.contains(",")) {
            camposConcatenados = camposConcatenados.replaceAll(",", "");
        }
        String listaCampo = "";
        String p[] = camposConcatenados.split("#");
        for (int j = 0; j < p.length; j++) {
            String q[] = p[j].split("\\|");
//            for (int k = 0; k < q.length; k++) {
//                listaCampos += "Campo " + q[0] + " de tipo " + q[1] + " con tamaño máx de " + q[2] + "\n";
//            }
            listaCampo += "Campo " + q[0] + " de tipo " + q[1] + " con tamaño máx de " + q[2] + "\n";
        }
        //System.out.println(listaCampos);
        listarCampos = listaCampo;
    }

    public void creacionCampos() {
        String numCamposInput = JOptionPane.showInputDialog(this, "Ingrese la cantidad de campos:");
        numCampos = Integer.parseInt(numCamposInput);

        for (int i = 0; i < numCampos; i++) {
            String nombreCampoTemp = JOptionPane.showInputDialog(this, "Ingrese el nombre para el campo " + (i + 1) + " ");

            String tipoCampoTemp = JOptionPane.showInputDialog(this, "Ingrese el tipo de campo para el campo " + nombreCampoTemp + "\n 1 = int,2 = String, 3 = double, 4 = boolean, 5 = long");
            int tipoCampoDecodificado = Integer.parseInt(tipoCampoTemp);
            String tipoDeCampoDefinitivo = "";
            if (tipoCampoDecodificado == 1) {
                tipoDeCampoDefinitivo = "int";
            } else if (tipoCampoDecodificado == 2) {
                tipoDeCampoDefinitivo = "char";
            } else if (tipoCampoDecodificado == 3) {
                tipoDeCampoDefinitivo = "double";
            } else if (tipoCampoDecodificado == 4) {
                tipoDeCampoDefinitivo = "boolean";
            } else if (tipoCampoDecodificado == 5) {
                tipoDeCampoDefinitivo = "long";
            } else {
                tipoCampoTemp = JOptionPane.showInputDialog(this, "Ingrese el tipo correcto de campo para el campo " + nombreCampoTemp + "\n 1 = int,2 = String, 3 = double, 4 = boolean");
            }

            String longitudCampoTemp = JOptionPane.showInputDialog(this, "Ingrese la longitud de campo para el campo (de 0 en adelante)" + nombreCampoTemp);
            int longitudCampoIntTemp = Integer.parseInt(longitudCampoTemp);
            while (longitudCampoIntTemp <= 0) {
                longitudCampoTemp = JOptionPane.showInputDialog(this, "Ingrese la longitud de campo para el campo (de 0 en adelante)" + nombreCampoTemp);
                longitudCampoIntTemp = Integer.parseInt(longitudCampoTemp);
            }

            camposDeterminados += nombreCampoTemp + "|" + tipoDeCampoDefinitivo + "|" + longitudCampoIntTemp + "|#";
            listarCampos += "Campo " + nombreCampoTemp + " de tipo " + tipoDeCampoDefinitivo + " con tamaño máx de " + longitudCampoIntTemp + "\n";

        }
        camposDeterminados += ",";
    }

    private void btnCamposBorrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCamposBorrarActionPerformed
        //BORRAR CAMPO
        //System.out.println("llave es "+indiceLlavePrimariaDecodificado);
        int numCampoBorrar = numCampoBorrar = Integer.parseInt(JOptionPane.showInputDialog(this, "Ingresa número de campo a eliminar: "));
        while (numCampoBorrar == indiceLlavePrimariaDecodificado || numCampoBorrar == indiceLlavePrimariaDecodificado) {
            numCampoBorrar = Integer.parseInt(JOptionPane.showInputDialog(this, "Ingresa número de campo a eliminar (distinto al que representa la llave): "));
        }
        String campos[] = camposDeterminados.split("#");
        camposDeterminados = camposDeterminados.replace(campos[numCampoBorrar - 1] + "#", "");
        //camposDeterminados += ",";
        System.out.println(camposDeterminados);

        listaCampos(camposDeterminados);
    }//GEN-LAST:event_btnCamposBorrarActionPerformed

    private void btnCamposModificarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCamposModificarActionPerformed
        //MODIFICAR CAMPOS
        System.out.println(metadata);
        System.out.println(camposDeterminados);
        System.out.println(indiceLlavePrimariaDecodificado);
        System.out.println(indiceLlaveSecundariaDecodificado);

        int numCampoModificar = Integer.parseInt(JOptionPane.showInputDialog(this, "Ingresa número de campo a modificar: "));          //VALIDAR
        int opcionModificar = Integer.parseInt(JOptionPane.showInputDialog(this, "Qué vas a modificar?: \n 1: Nombre campo\n 2: Tipo variable\n 3: Longitud campo"));          //VALIDAR
        String nuevoParametro = "";
        if (opcionModificar == 1) {
            nuevoParametro = JOptionPane.showInputDialog(this, "Ingresa nuevo nombre de campo: ");
        } else if (opcionModificar == 2) {
            nuevoParametro = JOptionPane.showInputDialog(this, "Ingresa nuevo tipo variable de campo: ");
        } else if (opcionModificar == 3) {
            nuevoParametro = JOptionPane.showInputDialog(this, "Ingresa nueva longitud de campo: ");
        }

        String campos[] = camposDeterminados.split("#");
        String parametrosCampo[] = campos[numCampoModificar - 1].split("\\|");
        camposDeterminados = camposDeterminados.replace(parametrosCampo[opcionModificar - 1], nuevoParametro);

        camposDeterminados += ",";
        System.out.println("Campos quedan " + camposDeterminados);
        listaCampos(camposDeterminados);            //modifica el listarCampos

    }//GEN-LAST:event_btnCamposModificarActionPerformed

    private void btnCamposListarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCamposListarActionPerformed
        JOptionPane.showMessageDialog(this, listarCampos);
    }//GEN-LAST:event_btnCamposListarActionPerformed

    private void btnCamposCrearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCamposCrearActionPerformed

        if (archivoFueAbierto == true) {
            creacionCampos();
        } else {
            creacionCampos();

            String indiceLlavePrimaria = JOptionPane.showInputDialog(this, "Ingrese un num desde 1 hasta " + numCampos + " para seleccionar la llave primaria de los campos.");
            indiceLlavePrimariaDecodificado = Integer.parseInt(indiceLlavePrimaria);
            
            //int input = JOptionPane.showConfirmDialog(null, "Tenemos llave secundaria?");     // 0=yes, 1=no, 2=cancel
            String indiceLlaveSecundaria = indiceLlavePrimaria;
            while(indiceLlaveSecundaria==indiceLlavePrimaria){
                    indiceLlaveSecundaria = JOptionPane.showInputDialog(this, "Ingrese un num desde 1 hasta " + numCampos + " para seleccionar la llave secundaria de los campos. Diferente a "+indiceLlavePrimaria);
            }
            indiceLlaveSecundariaDecodificado = Integer.parseInt(indiceLlaveSecundaria);
            
            metadata += indiceLlavePrimaria + "," + indiceLlaveSecundaria+ ",";
        }

    }//GEN-LAST:event_btnCamposCrearActionPerformed

    private void btnArchivoNuevoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnArchivoNuevoActionPerformed
        // TODO add your handling code here:
        //NUEVO ARCHIVO        mostrar JOptionPane para ingresar nombre del archivo
        //String nombre = JOptionPane.showInputDialog("Ingresa nombre del archivo: ");
        archivoAbierto();
        String nombreArchivo;
        camposDeterminados = "";
        listarCampos = "";

        JFileChooser jfc = new JFileChooser("./");
        FileNameExtensionFilter filtro = new FileNameExtensionFilter("Archivos de Texto", "txt");
        jfc.addChoosableFileFilter(filtro);
        int seleccion = jfc.showSaveDialog(this);
        FileWriter fw = null;
        BufferedWriter bw = null;
        if (seleccion == JFileChooser.APPROVE_OPTION) {
            try {
                //File fichero = null;
                if (jfc.getFileFilter().getDescription().equals("Archivos de Texto")) {
                    nombreArchivo = jfc.getSelectedFile().getName();// .getPath();
                    fichero = new File(jfc.getSelectedFile().getPath() + ".txt");

                } else {
                    nombreArchivo = jfc.getSelectedFile().getName(); //.getPath();
                    fichero = new File(jfc.getSelectedFile().getPath() + ".txt");
                    //fichero = jfc.getSelectedFile();
                }
                fw = new FileWriter(fichero);
                bw = new BufferedWriter(fw);

                /*for (Vehiculo v : vehiculos) {        PRIMERA FORMA CON EL ARRAYLIST* NO FUNCIONA DEL TODO
                    bw.write(v.getCodigo() + ";");
                    bw.write(v.getMarca()+ ";");
                    bw.write(v.getModelo()+ ";");
                    bw.write(v.getAno()+ ";");
                    bw.write(v.getPrecio()+ ";"+"\n");
                }*/
                //bw.write("METADATA," + nombreArchivo+",");                  //ESTA LINEA
                metadata = "METADATA," + nombreArchivo + ",";
//                for (int i = 0; i < tabla_vehiculos.getRowCount(); i++) {
//                    bw.write((String) tabla_vehiculos.getValueAt(i, 0)+";");
//                    bw.write((String) tabla_vehiculos.getValueAt(i, 1)+";");
//                    bw.write((String) tabla_vehiculos.getValueAt(i, 2)+";");
//                    bw.write((String) tabla_vehiculos.getValueAt(i, 3)+";");
//                    bw.write((String) tabla_vehiculos.getValueAt(i, 4)+";"+"\n");
//                }

//                DefaultTableModel modelo = (DefaultTableModel) tabla_vehiculos1.getModel();
//                tabla_vehiculos.setModel(modelo);   //limpio la table
                //ta_1.setText("");
                bw.flush();

                //CREAR ARCHIVO DE AVAILIST
                File ficheroAvail = new File("./" + nombreArchivo + "_availList.txt");
                try {
                    // A partir del objeto File creamos el fichero físicamente
                    if (ficheroAvail.createNewFile()) {
                    }
                } catch (IOException ioe) {
                    ioe.printStackTrace();
                }
                JOptionPane.showMessageDialog(this, "Archivo guardado excitosamente en " + fichero.toString());
            } catch (Exception e) {
                e.printStackTrace();
            }

            try {
                bw.close();
                fw.close();
            } catch (IOException ex) {
            }
        }
    }//GEN-LAST:event_btnArchivoNuevoActionPerformed

    public static String removeLastChar(String str) {
        return removeLastChars(str, 1);
    }

    public static String removeLastChars(String str, int chars) {
        return str.substring(0, str.length() - chars);
    }

    private void btnArchivoAbrirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnArchivoAbrirActionPerformed
        // TODO add your handling code here:
        //ARBIR ARCHIVO
        archivoAbierto();
        metadata = "";
        camposDeterminados = "";
        registrosDeterminados = "";
        listarCampos = "";
        archivoFueAbierto = true;
        fichero = null;
        File ficheroAbrir = null;
        FileReader fr = null;
        BufferedReader br = null;

//        DefaultTableModel modelo = (DefaultTableModel) tabla_vehiculos1.getModel();
//        tabla_vehiculos.setModel(modelo);   //limpio la table
        try {
            JFileChooser jfc = new JFileChooser("./");
            FileNameExtensionFilter filtro = new FileNameExtensionFilter("Archivos de Texto", "txt");
            FileNameExtensionFilter filtro2 = new FileNameExtensionFilter("Imagenes", "jpg", "png", "bmp");
            jfc.setFileFilter(filtro);
            jfc.addChoosableFileFilter(filtro2);
            int seleccion = jfc.showOpenDialog(this);
            if (seleccion == JFileChooser.APPROVE_OPTION) {
                ficheroAbrir = jfc.getSelectedFile();
                fichero = ficheroAbrir;                             //se actualiza que el nuevo fichero global es este
                fr = new FileReader(ficheroAbrir);
                br = new BufferedReader(fr);
                String linea;
//                tabla_vehiculos.setModel(modelo);   //limpio la table
//                fillTextArea();

//                DefaultTableModel modeloSetear = (DefaultTableModel) tabla_vehiculos.getModel();    //capturo el modelo, que debería de estar vacío
//                while((linea=br.readLine())!=null){
//                    String t[] = linea.split(";");      //TOKENS separados por ;
//                    //System.out.println(t[0]+" "+t[1]+" "+t[2]+" "+t[3]+" "+t[4]+"\n"); //para comprobar si sirve
//                    Object[] newrow = {
//                        t[0],
//                        t[1],
//                        t[2],
//                        t[3],
//                        t[4]
//                    };
//                    modeloSetear.addRow(newrow);  
//                }
//                tabla_vehiculos.setModel(modeloSetear);     //le seteo el modelo q contiene todas las nuevas rows
                int numLinea = 0;
                ArrayList<String> nameCampos = new ArrayList<String>();
                ArrayList<String> tipoCampo = new ArrayList<String>();
                ArrayList<Integer> sizeCampo = new ArrayList<Integer>();
//                ArrayList<Object> campos = new ArrayList<Object>();
//                campos.add("hola");
//                campos.add(7);
//                System.out.println(campos.get(0));
//                System.out.println(campos.get(1));
//                System.out.println(campos.get(0).getClass().getSimpleName());
//                System.out.println(campos.get(1).getClass().getSimpleName());
//
//                if (campos.get(1) instanceof Integer) {
//                    System.out.println("es entero");
//                }
                //campos.get(1).getClass().getSimpleName();

                while ((linea = br.readLine()) != null) {
                    String t[] = linea.split(",");
                    for (int i = 0; i < t.length; i++) {

                        if (numLinea == 0) {                  //METADATA
                            metadata = linea;
                            if (t.length > 2) {
                                indiceLlavePrimariaDecodificado = Integer.parseInt(t[2]);
                            }
                            if (t.length > 3) {
                                indiceLlaveSecundariaDecodificado = Integer.parseInt(t[3]);
                            }
                        }
                        if (numLinea == 1) {                //CAMPOS
                            String p[] = t[i].split("#");
                            for (int j = 0; j < p.length; j++) {
                                String q[] = p[j].split("\\|");
                                for (int k = 0; k < q.length; k++) {
                                    if (k == 0) {
                                        nameCampos.add(q[k]);
                                    }
                                    if (k == 1) {
                                        tipoCampo.add(q[k]);
                                    }
                                    if (k == 2) {
                                        sizeCampo.add(Integer.valueOf(q[k]));
                                    }
                                }
                            }
                        } else {
                            //System.out.println(t[i]);
                        }
                    }

                    numLinea++;
                }
                for (int i = 0; i < nameCampos.size(); i++) {
                    System.out.println("Campo " + nameCampos.get(i) + " de tipo " + tipoCampo.get(i) + " con tamaño máx de " + sizeCampo.get(i));
                    listarCampos += "Campo " + nameCampos.get(i) + " de tipo " + tipoCampo.get(i) + " con tamaño máx de " + sizeCampo.get(i) + "\n";
                    actualizarCampos(nameCampos.get(i), tipoCampo.get(i), sizeCampo.get(i));
                }

            }
        } catch (Exception e) {
            e.printStackTrace();
        }

        try {
            br.close();
            fr.close();
        } catch (IOException ex) {
        }
        System.out.println(camposDeterminados);
        System.out.println("La metadata es: " + metadata);
    }//GEN-LAST:event_btnArchivoAbrirActionPerformed

    public void actualizarFichero() {
        String actual = fichero.getAbsolutePath();
        fichero = new File(actual);
    }

    private void btnArchivoSalvarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnArchivoSalvarActionPerformed
        //SALVAR ARCHIVO
        if (fichero != null) {
//            String nombreArchivo = "";
            //        JFileChooser jfc = new JFileChooser("./");
            //        FileNameExtensionFilter filtro = new FileNameExtensionFilter("Archivos de Texto", "txt");
            //        jfc.addChoosableFileFilter(filtro);
            //        int seleccion = jfc.showSaveDialog(this);
            FileWriter fw = null;
            BufferedWriter bw = null;
            FileReader fr = null;
            BufferedReader br = null;
            String linea;
            //if (seleccion == JFileChooser.APPROVE_OPTION) {
            try {
                //File fichero = null;
                //                if (jfc.getFileFilter().getDescription().equals("Archivos de Texto")) {
                //                    nombreArchivo = jfc.getSelectedFile().getName();// .getPath();
                //                    //fichero = new File(jfc.getSelectedFile().getPath());
                //
                //                } else {
                //                    nombreArchivo = jfc.getSelectedFile().getName(); //.getPath();
                //                    //fichero = new File(jfc.getSelectedFile().getPath());
                //                    //fichero = jfc.getSelectedFile();
                //                }
                //fw = new FileWriter(fichero, true);
                fw = new FileWriter(fichero);
                bw = new BufferedWriter(fw);

                /*for (Vehiculo v : vehiculos) {        PRIMERA FORMA CON EL ARRAYLIST* NO FUNCIONA DEL TODO
                        bw.write(v.getCodigo() + ";");
                        bw.write(v.getMarca()+ ";");
                        bw.write(v.getModelo()+ ";");
                        bw.write(v.getAno()+ ";");
                        bw.write(v.getPrecio()+ ";"+"\n");
                    }*/
                bw.write(metadata + "\n");
                if (!camposDeterminados.contains(",")) {
                    camposDeterminados += ",";
                }
                bw.write(camposDeterminados + "\n");

                String reg = leerRegistros();
                

                bw.write(reg);
                //                METADATA,header example,5/22/2021 9:19 PM,1,
                //                PersonID|int|6|true|#PersonName|char|20|false|#PersonAge|int|3|false|#CityID|int|2|false|,
                //                for (int i = 0; i < tabla_vehiculos.getRowCount(); i++) {
                //                    bw.write((String) tabla_vehiculos.getValueAt(i, 0)+";");
                //                    bw.write((String) tabla_vehiculos.getValueAt(i, 1)+";");
                //                    bw.write((String) tabla_vehiculos.getValueAt(i, 2)+";");
                //                    bw.write((String) tabla_vehiculos.getValueAt(i, 3)+";");
                //                    bw.write((String) tabla_vehiculos.getValueAt(i, 4)+";"+"\n");
                //                }

                //                DefaultTableModel modelo = (DefaultTableModel) tabla_vehiculos1.getModel();
                //                tabla_vehiculos.setModel(modelo);   //limpio la table
                //ta_1.setText("");
                bw.flush();
                JOptionPane.showMessageDialog(this, "Archivo guardado exitosamente en " + fichero.toString());
            } catch (Exception e) {
                e.printStackTrace();
            }

            try {
                bw.close();
                fw.close();
            } catch (IOException ex) {
            }
            //}
        } else {
            JOptionPane.showMessageDialog(this, "No has abierto un archivo. Intenta nuevamente");
        }
    }//GEN-LAST:event_btnArchivoSalvarActionPerformed

    private void btnArchivoCerrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnArchivoCerrarActionPerformed
        //CERRAR ARCHIVO
        int opcion = JOptionPane.showConfirmDialog(this, "¿Guardar Archivo?");
        if (opcion == 0 && fichero != null) {                                          //0:Sí quiere guargar

            //GUARDAR ARCHIVO
            FileWriter fw = null;
            BufferedWriter bw = null;
            try {
                fw = new FileWriter(fichero);
                bw = new BufferedWriter(fw);
                bw.write(metadata + "\n");
                if (!camposDeterminados.contains(",")) {
                    camposDeterminados += ",";
                }
                bw.write(camposDeterminados + "\n");
                String reg = leerRegistros();

                bw.write(reg);
                bw.flush();
                JOptionPane.showMessageDialog(this, "Archivo guardado exitosamente en " + fichero.toString());
            } catch (Exception e) {
                e.printStackTrace();
            }
            try {
                bw.close();
                fw.close();
            } catch (IOException ex) {
            }

            //REINICIAR VARIABLES GLOBALES
            metadata = "";
            camposDeterminados = "";
            listarCampos = "";
            indiceLlavePrimariaDecodificado = 0;
            indiceLlaveSecundariaDecodificado = 0;
            numCampos = 0;
            fichero = null;
        } else if (opcion == 0 && fichero == null) {                                      //0: Si quiere guardar pero no ha abierto un archivo
            JOptionPane.showMessageDialog(this, "Primero debes abrir un archivo");
        } else if (opcion == 1) {                                                       //1:No quiere guardar
            //REINICIAR VARIABLES GLOBALES
            metadata = "";
            camposDeterminados = "";
            listarCampos = "";
            indiceLlavePrimariaDecodificado = 0;
            indiceLlaveSecundariaDecodificado = 0;
            numCampos = 0;
            fichero = null;
        }
        if (opcion != 2 && fichero != null) {                                                              //2:Cancelar
            JOptionPane.showMessageDialog(this, "Archivo cerrado");
        }
        archivoCerrado();

    }//GEN-LAST:event_btnArchivoCerrarActionPerformed

    private void btnRegistrosIntroducirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRegistrosIntroducirActionPerformed
        // TODO add your handling code here:
        ArrayList<String> nombresParaCampos = new ArrayList<String>();
        ArrayList<String> tipoEnCampos = new ArrayList<String>();
        ArrayList<Integer> tamEnCampos = new ArrayList<Integer>();
        String registroDeterminado = "";
        String camposAUsar = camposDeterminados;
        camposAUsar = removeLastChar(camposAUsar);

        String p[] = camposAUsar.split("#");
        for (int j = 0; j < p.length; j++) {
            String q[] = p[j].split("\\|");
            for (int k = 0; k < q.length; k++) {
                if (k == 0) {
                    System.out.println("Nombre campo : " + q[k]);
                    nombresParaCampos.add(q[k]);
                }
                if (k == 1) {
                    System.out.println("Tipo de campo : " + q[k]);
                    tipoEnCampos.add(q[k]);
                }
                if (k == 2) {
                    System.out.println("Tamaño de campo : " + q[k]);
                    tamEnCampos.add(Integer.valueOf(q[k]));
                }
            }
        }

        String cantidadCampos = JOptionPane.showInputDialog("Ingrese la cantidad de registros que ingresara: ");
        int cantRegistros = Integer.parseInt(cantidadCampos);
        int cantCamposDeterminados = nombresParaCampos.size();

        for (int j = 0; j < cantRegistros; j++) {
            for (int i = 0; i < cantCamposDeterminados; i++) {
                boolean pasa = false;
                if (tipoEnCampos.get(i).equals("char")) {
                    pasa = false;
                    while (pasa == false) {
                        String stringAInsertar = JOptionPane.showInputDialog("Ingrese el string para el campo " + nombresParaCampos.get(i) + " con size max de " + tamEnCampos.get(i));
                        if (stringAInsertar.length() <= tamEnCampos.get(i)) {
                            pasa = true;
                            registroDeterminado += stringAInsertar + "|";
                        }
                    }
                } else if (tipoEnCampos.get(i).equals("int")) {
                    pasa = false;
                    while (pasa == false) {
                        int intAInsertar = 0;
                        try {
                            String intAInsertarPre = JOptionPane.showInputDialog("Ingrese el valor para el campo " + nombresParaCampos.get(i) + " con size max de " + tamEnCampos.get(i));
                            intAInsertar = Integer.parseInt(intAInsertarPre);
                        } catch (Exception e) {
                            e.printStackTrace();
                            System.out.println("No se pudo hacer la conversion de string a int");
                        }
                        if (String.valueOf(intAInsertar).length() <= tamEnCampos.get(i)) {
                            pasa = true;
                            registroDeterminado += intAInsertar + "|";
                        }
                    }
                } else if (tipoEnCampos.get(i).equals("boolean")) {
                    pasa = false;
                    while (pasa == false) {
                        String strValorBoolean = JOptionPane.showInputDialog("Ingrese el valor para el campo " + nombresParaCampos.get(i) + " valores permitidos: 0 = false, 1 = true");
                        int intValorBoolean = Integer.parseInt(strValorBoolean);
                        if (intValorBoolean == 0 || intValorBoolean == 1) {
                            if (intValorBoolean == 0) {
                                registroDeterminado += "false|";
                            } else {
                                registroDeterminado += "true|";
                            }
                            pasa = true;
                        }
                    }
                } else if (tipoEnCampos.get(i).equals("long")) {
                    pasa = false;
                    while (pasa == false) {
                        long longAInsertar = 0;
                        try {
                            String longAInsertarPre = JOptionPane.showInputDialog("Ingrese el valor para el campo " + nombresParaCampos.get(i) + " con size max de " + tamEnCampos.get(i));
                            longAInsertar = Long.valueOf(longAInsertarPre);
                        } catch (Exception e) {
                            e.printStackTrace();
                            System.out.println("No se pudo hacer la conversion de string a long");
                        }
                        if (String.valueOf(longAInsertar).length() <= tamEnCampos.get(i)) {
                            pasa = true;
                            registroDeterminado += longAInsertar + "|";
                        }
                    }
                } else if (tipoEnCampos.get(i).equals("double")) {
                    pasa = false;
                    while (pasa == false) {
                        double doubleAInsertar = 0;
                        try {
                            String doubleAInsertarPre = JOptionPane.showInputDialog("Ingrese el valor para el campo " + nombresParaCampos.get(i) + " con size max de " + tamEnCampos.get(i));
                            doubleAInsertar = Double.valueOf(doubleAInsertarPre);
                        } catch (Exception e) {
                            e.printStackTrace();
                            System.out.println("No se pudo hacer la conversion de string a double");
                        }
                        if (String.valueOf(doubleAInsertar).length() <= tamEnCampos.get(i)) {
                            pasa = true;
                            registroDeterminado += doubleAInsertar + "|";
                        }
                    }
                }
            }
            registroDeterminado += "#";

        }
        String reg = leerRegistros();
        System.out.println("ESTOS SON LOS ACTUALES: " + reg);
        String registrosPEscritura = sobreescribirRegistro(registroDeterminado, reg);
        System.out.println("ESTO ES LO QUE SE ESCRIBE :  " + registrosPEscritura);

        FileWriter fw = null;
        BufferedWriter bw = null;
        try {

            fw = new FileWriter(fichero);
            bw = new BufferedWriter(fw);

            bw.write(metadata + "\n");
            if (!camposDeterminados.contains(",")) {
                camposDeterminados += ",";
            }
            bw.write(camposDeterminados + "\n");

            bw.write(registrosPEscritura);

            bw.flush();
        } catch (Exception e) {
            e.printStackTrace();
        }

        try {
            bw.close();
            fw.close();
        } catch (IOException ex) {
            ex.printStackTrace();
        }

        JOptionPane.showMessageDialog(this, "Ingresado exitosamente");
    }//GEN-LAST:event_btnRegistrosIntroducirActionPerformed

    public String leerRegistros() {
        FileReader fr = null;
        BufferedReader br = null;

        String registros = "";
//        int llavePrimaria = -1;
        try {
            fr = new FileReader(fichero);
            br = new BufferedReader(fr);
            String linea;

            int numLinea = 0;
            while ((linea = br.readLine()) != null) {
                String q[] = linea.split(",");
                for (int i = 0; i < q.length; i++) {
//                    if(numLinea == 0){
//                        llavePrimaria = Integer.parseInt(q[2]);
//                    }
                    if (numLinea == 2) {                  //METADATA

                        registros = q[0];

                    }
                }
                numLinea++;
            }
        } catch (Exception e) {
            e.printStackTrace();
        }

        try {
            br.close();
            fr.close();
        } catch (IOException ex) {
        }

        return registros;
    }

    public String sobreescribirRegistro(String registroInsertar, String registros) {
        availList.construirAvail(fichero.getName().toString().replace(".txt", "_availList.txt"), availList);
        DLLNode nodoIntentar = availList.head;
        if (registros == "" || availList.length() == 0) {
            registros += registroInsertar;
        } else {
            for (int i = 0; i < availList.length(); i++) {
                if (registroInsertar.length() <= (nodoIntentar).tamaño) {
                    registros = registros.substring(0, nodoIntentar.byteOff) + registroInsertar + registros.substring(nodoIntentar.byteOff + nodoIntentar.tamaño, registros.length());
                } else {
                    nodoIntentar = nodoIntentar.next;
                }

                if (nodoIntentar == null) {
                    break;
                }
            }
        }

        System.out.println("NODO YA REEMPLADAZO: " + registros);
        return registros;
    }

    private void btnIndicesCrearMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnIndicesCrearMouseClicked
        //CREAR INDICES QUE SERIA CREAR ARBOL
        Tree = new BTree(5);
        //abrir el archivo

        //File ficheroAbrir = new File(fichero);
        String registros = leerRegistros();
//        String temp[] = metadata.split(",");
//        int llavePrimaria = Integer.parseInt(temp[2]);
        int llavePrimaria = indiceLlavePrimariaDecodificado;

        System.out.println();
        System.out.println("Llave primaria: " + llavePrimaria);
        System.out.println("Los registros son: " + registros);

        ArrayList<Integer> regs = new ArrayList<Integer>();
        ArrayList<Integer> bytes = new ArrayList<Integer>();
        ArrayList<Integer> lenghts = new ArrayList<Integer>();
        String m[] = registros.split("#");
        for (int i = 0; i < m.length; i++) {
            String n[] = m[i].split("\\|");
            regs.add(Integer.parseInt(n[llavePrimaria - 1]));
            bytes.add(registros.indexOf(m[i]));
            lenghts.add(m[i].length());
        }

        //System.out.println(regs);
        for (int i = 0; i < regs.size(); i++) {
            Tree.insert(regs.get(i), bytes.get(i), lenghts.get(i));
        }
        Tree.traverse();
        System.out.println("");
        Tree.raiz.traverse2();

        JOptionPane.showMessageDialog(this, "Indices creados exitosamente.");
    }//GEN-LAST:event_btnIndicesCrearMouseClicked


    private void btnRegistrosBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRegistrosBuscarActionPerformed
        //BUSCAR ARCHIVO
        int llaveRegistro = Integer.parseInt(JOptionPane.showInputDialog(this, "Ingresa la llave del registro a buscar:"));
        if (Tree.search(llaveRegistro) != null) {
            JOptionPane.showMessageDialog(this, "El registro con llave " + llaveRegistro + " sí existe");
        } else {
            JOptionPane.showMessageDialog(this, "El registro con llave " + llaveRegistro + " no existe");
        }
    }//GEN-LAST:event_btnRegistrosBuscarActionPerformed

    private void btnRegistrosBorrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRegistrosBorrarActionPerformed
        //BORRAR REGISTROS
        int op = Integer.parseInt(JOptionPane.showInputDialog(this, "Eliminar registro en base a:\n 1. Llave \n 2. Crierio de campos"));
        Llave llaveEliminar;
        if (op == 1) {
            int llaveRegistro = Integer.parseInt(JOptionPane.showInputDialog(this, "Ingresa la llave del registro a eliminar:"));
            llaveEliminar = Tree.search(llaveRegistro);
            if (llaveEliminar != null) {
                Tree.remove(llaveRegistro);
                Tree.traverse();

                availList.addLast(llaveEliminar.getByteOff(), llaveEliminar.getLength());
                if (availList.length() >= 2) {
                    availList.sort();
                }
                availList.saveAvail(fichero.getName().toString().replace(".txt", "_availList.txt"));
                //String registros = leerRegistros();

                //el guardado solo es temporal
                availList.removeLast();

                String registros = leerRegistros();
                registros = registros.substring(0, llaveEliminar.byteOff) + "*" + registros.substring(llaveEliminar.byteOff + 1, registros.length());
                System.out.println(registros);

                FileWriter fw = null;
                BufferedWriter bw = null;
                try {

                    fw = new FileWriter(fichero);
                    bw = new BufferedWriter(fw);

                    bw.write(metadata + "\n");
                    if (!camposDeterminados.contains(",")) {
                        camposDeterminados += ",";
                    }
                    bw.write(camposDeterminados + "\n");

                    bw.write(registros);

                    bw.flush();
                } catch (Exception e) {
                    e.printStackTrace();
                }

                try {
                    bw.close();
                    fw.close();
                } catch (IOException ex) {
                    ex.printStackTrace();
                }
            }

        }
    }//GEN-LAST:event_btnRegistrosBorrarActionPerformed

    ArrayList<String> nombreCampos = new ArrayList<String>();
    ArrayList<String> tipoDeCampo = new ArrayList<String>();
    ArrayList<Integer> tamañoCampo = new ArrayList<Integer>();

    public void actualizarReglasDeCampos() {
        try {
            FileReader fr = null;
            BufferedReader br = null;
            fr = new FileReader(fichero);
            br = new BufferedReader(fr);
            String linea;
            int numLinea = 0;

            while ((linea = br.readLine()) != null) {
                String t[] = linea.split(",");
                for (int i = 0; i < t.length; i++) {

                    if (numLinea == 1) {
                        String p[] = t[i].split("#");
                        for (int j = 0; j < p.length; j++) {
                            String q[] = p[j].split("\\|");
                            for (int k = 0; k < q.length; k++) {
                                if (k == 0) {
                                    nombreCampos.add(q[k]);
                                }
                                if (k == 1) {
                                    tipoDeCampo.add(q[k]);
                                }
                                if (k == 2) {
                                    tamañoCampo.add(Integer.valueOf(q[k]));
                                }
                            }
                        }
                    } else {

                    }
                }
                numLinea++;
            }
        } catch (Exception e) {
        }
    }

    private void btnRegistrosModificarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRegistrosModificarActionPerformed
        //MODIFICAR ARCHIVO
        int llaveRegistro = Integer.parseInt(JOptionPane.showInputDialog(this, "Ingresa la llave del registro a buscar:"));
        Llave llaveRegistros = Tree.search(llaveRegistro);
        if (llaveRegistros != null) {                                                                  //si el registro existe
            //aca le metes la parte de "q es lo q deseas modificar"         DANIELTRAVIESO
            //recorda q vas a recivir un string tipo 
            //      Daniel|11941247|801200100002|false|     el byteOffset es la pos del caracter D en todos los registro, y el legnth llega hasta ese | NO EL #
            //AQUI SE RECIBE EL OFFSET, DESPUES MEDIANTE EL OFFSET CON LA LINEA DE REGISTRO SE OBTIENE EL REGISTRO A MODIFICAR POR AHORA ESTA EN DURO AQUI ABAJO
            //String stringRecibida = "Daniel|11941247|0801200100002|false|";
            String stringRecibida = leerRegistros().substring(llaveRegistros.byteOff, llaveRegistros.byteOff + llaveRegistros.length);
            System.out.println(stringRecibida);
            actualizarReglasDeCampos();

            String t[] = stringRecibida.split("\\|");
            String aux = "";
            for (int i = 0; i < t.length; i++) {
                aux += i + " = " + t[i] + ", ";
            }

            int indiceRegistroAEditar = Integer.parseInt(JOptionPane.showInputDialog(aux + "\nIngrese el indice del campo que desea modificar del registro:"));
            boolean pasa = false;
            while (!pasa) {
                if (tipoDeCampo.get(indiceRegistroAEditar).equals("char")) {
                    String stringNuevaARegistro = JOptionPane.showInputDialog("Ingrese la nueva string con size max de " + tamañoCampo.get(indiceRegistroAEditar) + ": ");
                    if (stringNuevaARegistro.length() <= tamañoCampo.get(indiceRegistroAEditar)) {
                        pasa = true;
                        t[indiceRegistroAEditar] = stringNuevaARegistro;
                    }
                } else if (tipoDeCampo.get(indiceRegistroAEditar).equals("int")) {
                    try {
                        int enteroNuevoARegistro = Integer.parseInt(JOptionPane.showInputDialog("Ingrese el nuevo int con size max de " + tamañoCampo.get(indiceRegistroAEditar) + ": "));
                        if (String.valueOf(enteroNuevoARegistro).length() <= tamañoCampo.get(indiceRegistroAEditar)) {
                            pasa = true;
                            t[indiceRegistroAEditar] = String.valueOf(enteroNuevoARegistro);
                        }
                    } catch (Exception e) {
                        e.printStackTrace();
                        JOptionPane.showMessageDialog(this, "El int que se ingreso no es valido");
                    }
                } else if (tipoDeCampo.get(indiceRegistroAEditar).equals("long")) {
                    try {
                        long longNuevoARegistro = Integer.parseInt(JOptionPane.showInputDialog("Ingrese el nuevo long con size max de " + tamañoCampo.get(indiceRegistroAEditar) + ": "));
                        if (String.valueOf(longNuevoARegistro).length() <= tamañoCampo.get(indiceRegistroAEditar)) {
                            pasa = true;
                            t[indiceRegistroAEditar] = String.valueOf(longNuevoARegistro);
                        }
                    } catch (Exception e) {
                        e.printStackTrace();
                        JOptionPane.showMessageDialog(this, "El long que se ingreso no es valido");
                    }
                } else if (tipoDeCampo.get(indiceRegistroAEditar).equals("double")) {
                    try {
                        double doubleNuevoARegistro = Integer.parseInt(JOptionPane.showInputDialog("Ingrese el nuevo double con size max de " + tamañoCampo.get(indiceRegistroAEditar) + ": "));
                        if (String.valueOf(doubleNuevoARegistro).length() <= tamañoCampo.get(indiceRegistroAEditar)) {
                            pasa = true;
                            t[indiceRegistroAEditar] = String.valueOf(doubleNuevoARegistro);
                        }
                    } catch (Exception e) {
                        e.printStackTrace();
                        JOptionPane.showMessageDialog(this, "El long que se ingreso no es valido");
                    }
                } else if (tipoDeCampo.get(indiceRegistroAEditar).equals("boolean")) {
                    int valorBooleanoNuevoARegistro = Integer.parseInt(JOptionPane.showInputDialog("Ingrese 0=false 1=true"));
                    if (valorBooleanoNuevoARegistro == 0) {
                        t[indiceRegistroAEditar] = "false";
                        pasa = true;
                    } else if (valorBooleanoNuevoARegistro == 1) {
                        t[indiceRegistroAEditar] = "true";
                        pasa = true;
                    }
                }
            }

            String nuevoRegistro = "";
            for (int i = 0; i < t.length; i++) {
                nuevoRegistro += t[i] + "|";
            }

            //digamos q para este punto ya está modificado el registro, entonces ahora lo modifico en memoria para luego modificarlo en el archivo
            String registrosActualizados = leerRegistros().replace(stringRecibida, nuevoRegistro);
            //registros.eliminar(byteoffset, byteoffset+tamañoRegistro)     eliminaria el registro en memoria

        } else {                                                                                                 //si el registro no existe
            JOptionPane.showMessageDialog(this, "El registro con llave " + llaveRegistro + " no existe.\n Intenta de nuevo");
        }
    }//GEN-LAST:event_btnRegistrosModificarActionPerformed


    private void btnRegistrosListarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRegistrosListarActionPerformed
        // TODO add your handling code here:
        String previewRegistros = "";

        boolean didItPass = false;
        try {
            FileReader fr = null;
            BufferedReader br = null;
            fr = new FileReader(fichero);
            br = new BufferedReader(fr);
            String linea;
            int numLinea = 0;

            while ((linea = br.readLine()) != null) {
                String t[] = linea.split(",");
                for (int i = 0; i < 3; i++) {

                    if (numLinea == 2) {
                        if (linea.length() > 850) {
                            previewRegistros = linea.substring(0, 850);
                            didItPass = true;
                        } else {

                            for (int j = 0; j < t[0].length(); j++) {
                                if (t[0].charAt(j) != '#') {
                                    previewRegistros += t[0].charAt(j);
                                } else {
                                    break;
                                }
                            }

                        }
                    } else {

                    }
                }
                numLinea++;
            }
        } catch (Exception e) {
        }
        if (didItPass == true) {
            boolean pasa = false;
            while (!pasa) {
                if (!previewRegistros.endsWith("#")) {
                    previewRegistros = removeLastChar(previewRegistros);

                } else {
                    pasa = true;
                }
            }
        } else {
            JOptionPane.showMessageDialog(this, "La cantidad de registros no es suficiente para un preview, se mostrara el primer registro.");
        }

        System.out.println("\n" + previewRegistros);
        DefaultTableModel tabla = ((DefaultTableModel) tablaRegistrosListar.getModel());
        actualizarReglasDeCampos();
        tabla.setColumnCount(nombreCampos.size());
        tabla.setColumnIdentifiers(nombreCampos.toArray(new String[tipoDeCampo.size()]));

        String[] registrosIndividuales = previewRegistros.split("#");

        for (int j = 0; j < registrosIndividuales.length; j++) {
            String[] temp = registrosIndividuales[j].split("\\|");
            tabla.addRow(temp);
        }

        tablaRegistrosListar.setModel(tabla);
        jD_TablaListarRegistros.pack();
        jD_TablaListarRegistros.setLocationRelativeTo(this);
        jD_TablaListarRegistros.setVisible(true);

    }//GEN-LAST:event_btnRegistrosListarActionPerformed

    private void btnCerrarDialogoTablaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCerrarDialogoTablaActionPerformed
        jD_TablaListarRegistros.setVisible(false);
    }//GEN-LAST:event_btnCerrarDialogoTablaActionPerformed

    private void btnIndicesIndexarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnIndicesIndexarActionPerformed
        //REINDEXAR INDICES
        String registros = leerRegistros();
        String temp[] = metadata.split(",");
        int llavePrimaria = Integer.parseInt(temp[2]);
        int llaveSecundaria = Integer.parseInt(temp[3]);
        
        if(indiceLlavePrimariaDecodificado==llavePrimaria)
            indiceLlavePrimariaDecodificado = llaveSecundaria;
        else
            indiceLlavePrimariaDecodificado = llavePrimaria;
        
        Tree = new BTree(5);
        
        System.out.println();
        System.out.println("Llave primaria: " + indiceLlavePrimariaDecodificado);
        System.out.println("Los registros son: " + registros);

        ArrayList<Integer> regs = new ArrayList<Integer>();
        ArrayList<Integer> bytes = new ArrayList<Integer>();
        ArrayList<Integer> lenghts = new ArrayList<Integer>();
        String m[] = registros.split("#");
        for (int i = 0; i < m.length; i++) {
            String n[] = m[i].split("\\|");
            regs.add(Integer.parseInt(n[indiceLlavePrimariaDecodificado - 1]));
            bytes.add(registros.indexOf(m[i]));
            lenghts.add(m[i].length());
        }

        //System.out.println(regs);
        for (int i = 0; i < regs.size(); i++) {
            Tree.insert(regs.get(i), bytes.get(i), lenghts.get(i));
        }
        Tree.traverse();
        System.out.println("");
        Tree.raiz.traverse2();

        JOptionPane.showMessageDialog(this, "Indices creados exitosamente.");
    }//GEN-LAST:event_btnIndicesIndexarActionPerformed

    String camposDeterminados = "";
    String listarCampos = "";
    String registrosDeterminados = "";
    int indiceLlavePrimariaDecodificado;
    int indiceLlaveSecundariaDecodificado;
    int numCampos = 0;
    File fichero = null;
    BTree Tree;
    DoublyLinkedList availList = new DoublyLinkedList();

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(main.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(main.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(main.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(main.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new main().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnArchivoAbrir;
    private javax.swing.JButton btnArchivoCerrar;
    private javax.swing.JButton btnArchivoNuevo;
    private javax.swing.JButton btnArchivoSalir;
    private javax.swing.JButton btnArchivoSalvar;
    private javax.swing.JButton btnCamposBorrar;
    private javax.swing.JButton btnCamposCrear;
    private javax.swing.JButton btnCamposListar;
    private javax.swing.JButton btnCamposModificar;
    private javax.swing.JButton btnCamposSalir;
    private javax.swing.JButton btnCerrarDialogoTabla;
    private javax.swing.JButton btnEstandExportExcel;
    private javax.swing.JButton btnEstandSalir;
    private javax.swing.JButton btnEstandXMLSchema;
    private javax.swing.JButton btnIndicesCrear;
    private javax.swing.JButton btnIndicesIndexar;
    private javax.swing.JButton btnIndicesSalir;
    private javax.swing.JButton btnMainMenuArchivo;
    private javax.swing.JButton btnMainMenuCampos;
    private javax.swing.JButton btnMainMenuEstandarizacion;
    private javax.swing.JButton btnMainMenuIndices;
    private javax.swing.JButton btnMainMenuRegistros;
    private javax.swing.JButton btnMainMenuSalir;
    private javax.swing.JButton btnRegistrosBorrar;
    private javax.swing.JButton btnRegistrosBuscar;
    private javax.swing.JButton btnRegistrosIntroducir;
    private javax.swing.JButton btnRegistrosListar;
    private javax.swing.JButton btnRegistrosModificar;
    private javax.swing.JButton btnRegistrosSalir;
    private javax.swing.JDialog jD_Archivo;
    private javax.swing.JDialog jD_Campos;
    private javax.swing.JDialog jD_Estandarizacion;
    private javax.swing.JDialog jD_Indices;
    private javax.swing.JDialog jD_Registros;
    private javax.swing.JDialog jD_TablaListarRegistros;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tablaRegistrosListar;
    // End of variables declaration//GEN-END:variables
}
